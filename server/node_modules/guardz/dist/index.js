"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isOneOf = exports.isBigInt = exports.isDateLike = exports.isBooleanLike = exports.isNumeric = exports.isNonPositiveInteger = exports.isNonNegativeInteger = exports.isNegativeInteger = exports.isPositiveInteger = exports.isInteger = exports.isNegativeNumber = exports.isNonPositiveNumber = exports.isPositiveNumber = exports.isNonNegativeNumber = exports.isNonEmptyString = exports.isPartialOf = exports.isObjectWithEachItem = exports.isNonNullObject = exports.isTuple = exports.isNonEmptyArrayWithEachItem = exports.isNonEmptyArray = exports.isArrayWithEachItem = exports.isError = exports.isIndexSignature = exports.isSet = exports.isMap = exports.isURLSearchParams = exports.isURL = exports.isFormData = exports.isBlob = exports.isFileList = exports.isFile = exports.isFunction = exports.isUnknown = exports.isString = exports.isNumber = exports.isNil = exports.isDefined = exports.isDate = exports.isBoolean = exports.isAny = exports.BrandSymbols = exports.isBranded = exports.guardWithTolerance = exports.isObject = exports.isObjectWith = exports.isNestedType = exports.isShape = exports.isSchema = exports.isType = void 0;
exports.isSymbol = exports.toBoolean = exports.toDate = exports.toNumber = exports.by = exports.generateTypeGuardError = exports.isPattern = exports.isRegex = exports.isEqualTo = exports.isEnum = exports.isAsserted = exports.isNilOr = exports.isUndefinedOr = exports.isNullOr = exports.isExtensionOf = exports.isIntersectionOf = exports.isOneOfTypes = void 0;
// Core type guard function
var isType_1 = require("./typeguards/isType");
Object.defineProperty(exports, "isType", { enumerable: true, get: function () { return isType_1.isType; } });
// Schema-based type guard functions
var isSchema_1 = require("./typeguards/isSchema");
Object.defineProperty(exports, "isSchema", { enumerable: true, get: function () { return isSchema_1.isSchema; } });
Object.defineProperty(exports, "isShape", { enumerable: true, get: function () { return isSchema_1.isShape; } });
Object.defineProperty(exports, "isNestedType", { enumerable: true, get: function () { return isSchema_1.isNestedType; } });
// Object type guard aliases
var isObjectWith_1 = require("./typeguards/isObjectWith");
Object.defineProperty(exports, "isObjectWith", { enumerable: true, get: function () { return isObjectWith_1.isObjectWith; } });
var isObject_1 = require("./typeguards/isObject");
Object.defineProperty(exports, "isObject", { enumerable: true, get: function () { return isObject_1.isObject; } });
// Guard with tolerance
var guardWithTolerance_1 = require("./typeguards/guardWithTolerance");
Object.defineProperty(exports, "guardWithTolerance", { enumerable: true, get: function () { return guardWithTolerance_1.guardWithTolerance; } });
// Branded type utilities
var isBranded_1 = require("./typeguards/isBranded");
Object.defineProperty(exports, "isBranded", { enumerable: true, get: function () { return isBranded_1.isBranded; } });
// Brand symbols for unique symbol branded types
var BrandSymbols_1 = require("./types/BrandSymbols");
Object.defineProperty(exports, "BrandSymbols", { enumerable: true, get: function () { return BrandSymbols_1.BrandSymbols; } });
// Primitive type guards
var isAny_1 = require("./typeguards/isAny");
Object.defineProperty(exports, "isAny", { enumerable: true, get: function () { return isAny_1.isAny; } });
var isBoolean_1 = require("./typeguards/isBoolean");
Object.defineProperty(exports, "isBoolean", { enumerable: true, get: function () { return isBoolean_1.isBoolean; } });
var isDate_1 = require("./typeguards/isDate");
Object.defineProperty(exports, "isDate", { enumerable: true, get: function () { return isDate_1.isDate; } });
var isDefined_1 = require("./typeguards/isDefined");
Object.defineProperty(exports, "isDefined", { enumerable: true, get: function () { return isDefined_1.isDefined; } });
var isNil_1 = require("./typeguards/isNil");
Object.defineProperty(exports, "isNil", { enumerable: true, get: function () { return isNil_1.isNil; } });
var isNumber_1 = require("./typeguards/isNumber");
Object.defineProperty(exports, "isNumber", { enumerable: true, get: function () { return isNumber_1.isNumber; } });
var isString_1 = require("./typeguards/isString");
Object.defineProperty(exports, "isString", { enumerable: true, get: function () { return isString_1.isString; } });
var isUnknown_1 = require("./typeguards/isUnknown");
Object.defineProperty(exports, "isUnknown", { enumerable: true, get: function () { return isUnknown_1.isUnknown; } });
// Function type guards
var isFunction_1 = require("./typeguards/isFunction");
Object.defineProperty(exports, "isFunction", { enumerable: true, get: function () { return isFunction_1.isFunction; } });
// Web API type guards
var isFile_1 = require("./typeguards/isFile");
Object.defineProperty(exports, "isFile", { enumerable: true, get: function () { return isFile_1.isFile; } });
var isFileList_1 = require("./typeguards/isFileList");
Object.defineProperty(exports, "isFileList", { enumerable: true, get: function () { return isFileList_1.isFileList; } });
var isBlob_1 = require("./typeguards/isBlob");
Object.defineProperty(exports, "isBlob", { enumerable: true, get: function () { return isBlob_1.isBlob; } });
var isFormData_1 = require("./typeguards/isFormData");
Object.defineProperty(exports, "isFormData", { enumerable: true, get: function () { return isFormData_1.isFormData; } });
var isURL_1 = require("./typeguards/isURL");
Object.defineProperty(exports, "isURL", { enumerable: true, get: function () { return isURL_1.isURL; } });
var isURLSearchParams_1 = require("./typeguards/isURLSearchParams");
Object.defineProperty(exports, "isURLSearchParams", { enumerable: true, get: function () { return isURLSearchParams_1.isURLSearchParams; } });
// Collection type guards
var isMap_1 = require("./typeguards/isMap");
Object.defineProperty(exports, "isMap", { enumerable: true, get: function () { return isMap_1.isMap; } });
var isSet_1 = require("./typeguards/isSet");
Object.defineProperty(exports, "isSet", { enumerable: true, get: function () { return isSet_1.isSet; } });
var isIndexSignature_1 = require("./typeguards/isIndexSignature");
Object.defineProperty(exports, "isIndexSignature", { enumerable: true, get: function () { return isIndexSignature_1.isIndexSignature; } });
// Error type guards
var isError_1 = require("./typeguards/isError");
Object.defineProperty(exports, "isError", { enumerable: true, get: function () { return isError_1.isError; } });
// Array type guards
var isArrayWithEachItem_1 = require("./typeguards/isArrayWithEachItem");
Object.defineProperty(exports, "isArrayWithEachItem", { enumerable: true, get: function () { return isArrayWithEachItem_1.isArrayWithEachItem; } });
var isNonEmptyArray_1 = require("./typeguards/isNonEmptyArray");
Object.defineProperty(exports, "isNonEmptyArray", { enumerable: true, get: function () { return isNonEmptyArray_1.isNonEmptyArray; } });
var isNonEmptyArrayWithEachItem_1 = require("./typeguards/isNonEmptyArrayWithEachItem");
Object.defineProperty(exports, "isNonEmptyArrayWithEachItem", { enumerable: true, get: function () { return isNonEmptyArrayWithEachItem_1.isNonEmptyArrayWithEachItem; } });
var isTuple_1 = require("./typeguards/isTuple");
Object.defineProperty(exports, "isTuple", { enumerable: true, get: function () { return isTuple_1.isTuple; } });
// Object type guards
var isNonNullObject_1 = require("./typeguards/isNonNullObject");
Object.defineProperty(exports, "isNonNullObject", { enumerable: true, get: function () { return isNonNullObject_1.isNonNullObject; } });
var isObjectWithEachItem_1 = require("./typeguards/isObjectWithEachItem");
Object.defineProperty(exports, "isObjectWithEachItem", { enumerable: true, get: function () { return isObjectWithEachItem_1.isObjectWithEachItem; } });
var isPartialOf_1 = require("./typeguards/isPartialOf");
Object.defineProperty(exports, "isPartialOf", { enumerable: true, get: function () { return isPartialOf_1.isPartialOf; } });
// String type guards
var isNonEmptyString_1 = require("./typeguards/isNonEmptyString");
Object.defineProperty(exports, "isNonEmptyString", { enumerable: true, get: function () { return isNonEmptyString_1.isNonEmptyString; } });
// Number type guards
var isNonNegativeNumber_1 = require("./typeguards/isNonNegativeNumber");
Object.defineProperty(exports, "isNonNegativeNumber", { enumerable: true, get: function () { return isNonNegativeNumber_1.isNonNegativeNumber; } });
var isPositiveNumber_1 = require("./typeguards/isPositiveNumber");
Object.defineProperty(exports, "isPositiveNumber", { enumerable: true, get: function () { return isPositiveNumber_1.isPositiveNumber; } });
var isNonPositiveNumber_1 = require("./typeguards/isNonPositiveNumber");
Object.defineProperty(exports, "isNonPositiveNumber", { enumerable: true, get: function () { return isNonPositiveNumber_1.isNonPositiveNumber; } });
var isNegativeNumber_1 = require("./typeguards/isNegativeNumber");
Object.defineProperty(exports, "isNegativeNumber", { enumerable: true, get: function () { return isNegativeNumber_1.isNegativeNumber; } });
var isInteger_1 = require("./typeguards/isInteger");
Object.defineProperty(exports, "isInteger", { enumerable: true, get: function () { return isInteger_1.isInteger; } });
var isPositiveInteger_1 = require("./typeguards/isPositiveInteger");
Object.defineProperty(exports, "isPositiveInteger", { enumerable: true, get: function () { return isPositiveInteger_1.isPositiveInteger; } });
var isNegativeInteger_1 = require("./typeguards/isNegativeInteger");
Object.defineProperty(exports, "isNegativeInteger", { enumerable: true, get: function () { return isNegativeInteger_1.isNegativeInteger; } });
var isNonNegativeInteger_1 = require("./typeguards/isNonNegativeInteger");
Object.defineProperty(exports, "isNonNegativeInteger", { enumerable: true, get: function () { return isNonNegativeInteger_1.isNonNegativeInteger; } });
var isNonPositiveInteger_1 = require("./typeguards/isNonPositiveInteger");
Object.defineProperty(exports, "isNonPositiveInteger", { enumerable: true, get: function () { return isNonPositiveInteger_1.isNonPositiveInteger; } });
var isNumeric_1 = require("./typeguards/isNumeric");
Object.defineProperty(exports, "isNumeric", { enumerable: true, get: function () { return isNumeric_1.isNumeric; } });
var isBooleanLike_1 = require("./typeguards/isBooleanLike");
Object.defineProperty(exports, "isBooleanLike", { enumerable: true, get: function () { return isBooleanLike_1.isBooleanLike; } });
var isDateLike_1 = require("./typeguards/isDateLike");
Object.defineProperty(exports, "isDateLike", { enumerable: true, get: function () { return isDateLike_1.isDateLike; } });
// BigInt type guards
var isBigInt_1 = require("./typeguards/isBigInt");
Object.defineProperty(exports, "isBigInt", { enumerable: true, get: function () { return isBigInt_1.isBigInt; } });
// Union type guards
var isOneOf_1 = require("./typeguards/isOneOf");
Object.defineProperty(exports, "isOneOf", { enumerable: true, get: function () { return isOneOf_1.isOneOf; } });
var isOneOfTypes_1 = require("./typeguards/isOneOfTypes");
Object.defineProperty(exports, "isOneOfTypes", { enumerable: true, get: function () { return isOneOfTypes_1.isOneOfTypes; } });
// Composite type guards
var isIntersectionOf_1 = require("./typeguards/isIntersectionOf");
Object.defineProperty(exports, "isIntersectionOf", { enumerable: true, get: function () { return isIntersectionOf_1.isIntersectionOf; } });
var isExtensionOf_1 = require("./typeguards/isExtensionOf");
Object.defineProperty(exports, "isExtensionOf", { enumerable: true, get: function () { return isExtensionOf_1.isExtensionOf; } });
// Nullable/Undefined type guards
var isNullOr_1 = require("./typeguards/isNullOr");
Object.defineProperty(exports, "isNullOr", { enumerable: true, get: function () { return isNullOr_1.isNullOr; } });
var isUndefinedOr_1 = require("./typeguards/isUndefinedOr");
Object.defineProperty(exports, "isUndefinedOr", { enumerable: true, get: function () { return isUndefinedOr_1.isUndefinedOr; } });
var isNilOr_1 = require("./typeguards/isNilOr");
Object.defineProperty(exports, "isNilOr", { enumerable: true, get: function () { return isNilOr_1.isNilOr; } });
// Special type guards
var isAsserted_1 = require("./typeguards/isAsserted");
Object.defineProperty(exports, "isAsserted", { enumerable: true, get: function () { return isAsserted_1.isAsserted; } });
var isEnum_1 = require("./typeguards/isEnum");
Object.defineProperty(exports, "isEnum", { enumerable: true, get: function () { return isEnum_1.isEnum; } });
var isEqualTo_1 = require("./typeguards/isEqualTo");
Object.defineProperty(exports, "isEqualTo", { enumerable: true, get: function () { return isEqualTo_1.isEqualTo; } });
var isRegex_1 = require("./typeguards/isRegex");
Object.defineProperty(exports, "isRegex", { enumerable: true, get: function () { return isRegex_1.isRegex; } });
var isPattern_1 = require("./typeguards/isPattern");
Object.defineProperty(exports, "isPattern", { enumerable: true, get: function () { return isPattern_1.isPattern; } });
// Type guard error generation
var generateTypeGuardError_1 = require("./typeguards/generateTypeGuardError");
Object.defineProperty(exports, "generateTypeGuardError", { enumerable: true, get: function () { return generateTypeGuardError_1.generateTypeGuardError; } });
// Array utilities for type guard compatibility
var arrayUtils_1 = require("./utils/arrayUtils");
Object.defineProperty(exports, "by", { enumerable: true, get: function () { return arrayUtils_1.by; } });
// Type converters - convert branded types to their real types
var toNumber_1 = require("./converters/toNumber");
Object.defineProperty(exports, "toNumber", { enumerable: true, get: function () { return toNumber_1.toNumber; } });
var toDate_1 = require("./converters/toDate");
Object.defineProperty(exports, "toDate", { enumerable: true, get: function () { return toDate_1.toDate; } });
var toBoolean_1 = require("./converters/toBoolean");
Object.defineProperty(exports, "toBoolean", { enumerable: true, get: function () { return toBoolean_1.toBoolean; } });
// Symbol type guard
var isSymbol_1 = require("./typeguards/isSymbol");
Object.defineProperty(exports, "isSymbol", { enumerable: true, get: function () { return isSymbol_1.isSymbol; } });
