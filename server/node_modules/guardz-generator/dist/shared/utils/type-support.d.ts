import * as ts from 'typescript';
/**
 * Checks if a type is supported for type guard generation
 * @param typeNode The TypeScript type node to check
 * @returns true if the type is supported, false otherwise
 */
export declare const isSupportedType: (typeNode: ts.TypeNode) => boolean;
/**
 * Checks if a property type is supported for type guard generation
 * @param property The property info to check
 * @returns true if the property type is supported, false otherwise
 */
export declare const isSupportedProperty: (property: {
    type: ts.TypeNode;
}) => boolean;
/**
 * Checks if a type guard string represents a supported type
 * @param typeGuard The type guard string to check
 * @returns true if the type guard represents a supported type, false otherwise
 */
export declare const isSupportedTypeGuard: (typeGuard: string) => boolean;
/**
 * Separates properties into supported and unsupported groups
 * @param properties Array of property info
 * @returns Object with supported and unsupported property arrays
 */
export declare const separatePropertiesBySupport: (properties: Array<{
    name: string;
    type: ts.TypeNode;
    isOptional?: boolean;
}>) => {
    supported: {
        name: string;
        type: ts.TypeNode;
        isOptional?: boolean;
    }[];
    unsupported: {
        name: string;
        type: ts.TypeNode;
        isOptional?: boolean;
    }[];
};
//# sourceMappingURL=type-support.d.ts.map