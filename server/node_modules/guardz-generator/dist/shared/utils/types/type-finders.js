"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.findTypeAliasWithSourceFile = exports.findInterfaceWithSourceFile = exports.findTypeSourceFile = void 0;
const ts = __importStar(require("typescript"));
// Find the source file that contains a specific type
const findTypeSourceFile = (typeName, sourceFiles) => {
    for (const sf of sourceFiles) {
        let found = false;
        ts.forEachChild(sf, (node) => {
            if ((ts.isInterfaceDeclaration(node) ||
                ts.isEnumDeclaration(node) ||
                ts.isTypeAliasDeclaration(node)) &&
                node.name &&
                node.name.text === typeName) {
                found = true;
            }
        });
        if (found)
            return sf.fileName;
    }
    return undefined;
};
exports.findTypeSourceFile = findTypeSourceFile;
// Find an interface declaration with its source file
const findInterfaceWithSourceFile = (interfaceName, sourceFiles) => {
    for (const sourceFile of sourceFiles) {
        let found = null;
        ts.forEachChild(sourceFile, (node) => {
            if (ts.isInterfaceDeclaration(node) &&
                node.name.text === interfaceName &&
                !found) {
                found = node;
            }
        });
        if (found) {
            return [found, sourceFile];
        }
    }
    return null;
};
exports.findInterfaceWithSourceFile = findInterfaceWithSourceFile;
// Find a type alias declaration with its source file
const findTypeAliasWithSourceFile = (typeName, sourceFiles) => {
    for (const sourceFile of sourceFiles) {
        let found = null;
        ts.forEachChild(sourceFile, (node) => {
            if (ts.isTypeAliasDeclaration(node) &&
                node.name.text === typeName &&
                !found) {
                found = node;
            }
        });
        if (found) {
            return [found, sourceFile];
        }
    }
    return null;
};
exports.findTypeAliasWithSourceFile = findTypeAliasWithSourceFile;
//# sourceMappingURL=type-finders.js.map