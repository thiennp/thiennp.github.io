import type { ImportInfo } from '../../../domain/types';
import type * as ts from 'typescript';
export interface ImportItem {
    name: string;
    path: string;
    isType: boolean;
    isDefault: boolean;
    isNamespace?: boolean;
    touchCount?: number;
}
export interface ImportStrategyContext {
    outputDir: string;
    sourceFiles: ts.SourceFile[];
    importMap?: Map<string, ImportInfo>;
    currentSourceFile?: ts.SourceFile;
}
export interface ImportStrategyResult {
    importStatements: string[];
    importItems: ImportItem[];
}
declare const GUARDZ_UTILITY_NAMES: readonly ["isString", "isNumber", "isBoolean", "isDate", "isArrayWithEachItem", "isObjectWithEachItem", "isUndefinedOr", "isNullOr", "isNilOr", "isOneOf", "isOneOfTypes", "isEqualTo", "isAny", "isUnknown", "isDefined", "isNil", "isEnum", "isNonEmptyString", "isNonNegativeNumber", "isPositiveNumber", "isNonPositiveNumber", "isNegativeNumber", "isInteger", "isPositiveInteger", "isNegativeInteger", "isNonNegativeInteger", "isNonPositiveInteger", "isNumeric", "isBooleanLike", "isDateLike", "isBigInt", "isNonEmptyArray", "isNonEmptyArrayWithEachItem", "isType", "isPartialOf", "isNonNullObject", "isTuple", "isIntersectionOf", "isExtensionOf", "guardWithTolerance", "isAsserted", "isFileList", "isBlob", "isFormData", "isURL", "isURLSearchParams", "isObjectWith", "isObject", "isFunction", "isFile", "isMap", "isSet", "isError", "generateTypeGuardError"];
declare const removeUnusedImports: (allImports: ImportItem[], typeGuardCode: string) => ImportItem[];
export declare const executeImportStrategy: (importTypes: string[], usedEnums: string[], usedGuardzUtilities: string[], usedTypeGuards: string[], usedGuardzTypeAliases: string[], needsTypeGuardFnImport: boolean, needsTypeGuardFnConfigImport: boolean, context: ImportStrategyContext, buildTypeImportInfo: (type: string, context: ImportStrategyContext) => ImportItem | null, buildTypeGuardImportInfo: (name: string, context: ImportStrategyContext) => ImportItem | null) => ImportStrategyResult;
export { GUARDZ_UTILITY_NAMES };
export { removeUnusedImports };
//# sourceMappingURL=import-strategy.d.ts.map