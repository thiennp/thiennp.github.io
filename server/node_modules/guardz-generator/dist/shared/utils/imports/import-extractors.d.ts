import * as ts from 'typescript';
import type { ImportInfo } from '../../../domain/types';
/**
 * Enum representing different types of imports based on their source and type guard availability
 */
export declare enum ImportTypeEnum {
    /** Type defined in the same file (no import needed) */
    FROM_SAME_FILE = "FROM_SAME_FILE",
    /** Type from node_modules with type guard also from node_modules */
    FROM_NODE_MODULES_WITH_TYPE_GUARD_FROM_NODE_MODULES = "FROM_NODE_MODULES_WITH_TYPE_GUARD_FROM_NODE_MODULES",
    /** Type from node_modules with type guard from project (matched by import path and type name) */
    FROM_NODE_MODULES_WITH_TYPE_GUARD_FROM_GLOBAL = "FROM_NODE_MODULES_WITH_TYPE_GUARD_FROM_GLOBAL",
    /** Type from node_modules without any type guard */
    FROM_NODE_MODULES_WITHOUT_TYPE_GUARD = "FROM_NODE_MODULES_WITHOUT_TYPE_GUARD",
    /** Type from global path (tsconfig path mappings) */
    FROM_GLOBAL_PATH = "FROM_GLOBAL_PATH",
    /** Type from relative path (local project files) */
    FROM_RELATIVE_PATH = "FROM_RELATIVE_PATH",
    /** Native types that are not imported and not part of supported guardz types */
    FROM_NATIVE = "FROM_NATIVE"
}
/**
 * Extracts all import statements from a source file
 *
 * @param sourceFile - The TypeScript source file to extract imports from
 * @param sourceFiles - Optional array of all source files in the project for context
 * @returns Array of ImportInfo objects containing details about each import
 *
 * @example
 * ```typescript
 * const sourceCode = `
 * import { User, Product } from 'my-package';
 * import Button from '@/components/Button';
 * import type { Config } from './types/Config';
 * `;
 *
 * const sourceFile = ts.createSourceFile('src/components/App.ts', sourceCode, ts.ScriptTarget.Latest);
 * const sourceFiles = []; // array of all source files
 *
 * const imports = extractImportsFromFile(sourceFile, sourceFiles);
 * // Returns: [
 * //   {
 * //     typeName: 'User',
 * //     importPath: 'my-package',
 * //     isDefault: false,
 * //     importType: ImportTypeEnum.FROM_NODE_MODULES_WITHOUT_TYPE_GUARD
 * //   },
 * //   {
 * //     typeName: 'Product',
 * //     importPath: 'my-package',
 * //     isDefault: false,
 * //     importType: ImportTypeEnum.FROM_NODE_MODULES_WITHOUT_TYPE_GUARD
 * //   },
 * //   {
 * //     typeName: 'Button',
 * //     importPath: '@/components/Button',
 * //     isDefault: true,
 * //     importType: ImportTypeEnum.FROM_GLOBAL_PATH
 * //   },
 * //   {
 * //     typeName: 'Config',
 * //     importPath: './types/Config',
 * //     isDefault: false,
 * //     importType: ImportTypeEnum.FROM_RELATIVE_PATH
 * //   }
 * // ]
 * ```
 */
export declare const extractImportsFromFile: (sourceFile: ts.SourceFile, sourceFiles?: ts.SourceFile[]) => ImportInfo[];
/**
 * Extracts import information for a specific type from a source file
 *
 * @param sourceFile - The TypeScript source file to search for imports
 * @param typeName - The name of the type to find import information for
 * @param sourceFiles - Optional array of all source files in the project for context
 * @returns ImportInfo object for the specified type, or null if not found
 *
 * @example
 * ```typescript
 * const sourceCode = `
 * import { User, Product } from 'my-package';
 * import Button from '@/components/Button';
 * import type { Config } from './types/Config';
 * `;
 *
 * const sourceFile = ts.createSourceFile('src/components/App.ts', sourceCode, ts.ScriptTarget.Latest);
 * const sourceFiles = []; // array of all source files
 *
 * const userImport = extractImportsFromSourceFile(sourceFile, 'User', sourceFiles);
 * // Returns: {
 * //   typeName: 'User',
 * //   importPath: 'my-package',
 * //   isDefault: false,
 * //   importType: ImportTypeEnum.FROM_NODE_MODULES_WITHOUT_TYPE_GUARD
 * // }
 *
 * const buttonImport = extractImportsFromSourceFile(sourceFile, 'Button', sourceFiles);
 * // Returns: {
 * //   typeName: 'Button',
 * //   importPath: '@/components/Button',
 * //   isDefault: true,
 * //   importType: ImportTypeEnum.FROM_GLOBAL_PATH
 * // }
 *
 * const notFound = extractImportsFromSourceFile(sourceFile, 'NotFound', sourceFiles);
 * // Returns: null
 * ```
 */
export declare const extractImportsFromSourceFile: (sourceFile: ts.SourceFile, typeName: string, sourceFiles?: ts.SourceFile[]) => ImportInfo | null;
/**
 * Builds a map of type names to their import information across all source files
 *
 * @param sourceFiles - Array of all TypeScript source files in the project
 * @returns Map where keys are type names and values are ImportInfo objects
 *
 * @example
 * ```typescript
 * const sourceFiles = [
 *   ts.createSourceFile('src/components/Button.ts', 'import { User } from "my-package";', ts.ScriptTarget.Latest),
 *   ts.createSourceFile('src/components/App.ts', 'import Button from "@/components/Button";', ts.ScriptTarget.Latest)
 * ];
 *
 * const importMap = buildImportMap(sourceFiles);
 * // Returns: Map {
 * //   'User' => {
 * //     typeName: 'User',
 * //     importPath: 'my-package',
 * //     isDefault: false,
 * //     importType: ImportTypeEnum.FROM_NODE_MODULES_WITHOUT_TYPE_GUARD
 * //   },
 * //   'Button' => {
 * //     typeName: 'Button',
 * //     importPath: '@/components/Button',
 * //     isDefault: true,
 * //     importType: ImportTypeEnum.FROM_GLOBAL_PATH
 * //   }
 * // }
 * ```
 */
export declare const buildImportMap: (sourceFiles: ts.SourceFile[]) => Map<string, ImportInfo>;
/**
 * Extracts namespace information from a qualified type name
 *
 * @param qualifiedTypeName - The qualified type name (e.g., 'ts.CompilerOptions')
 * @returns Object with namespace and type name, or null if not namespace-qualified
 *
 * @example
 * ```typescript
 * const result = extractNamespaceFromQualifiedType('ts.CompilerOptions');
 * // Returns: { namespace: 'ts', typeName: 'CompilerOptions' }
 *
 * const result2 = extractNamespaceFromQualifiedType('User');
 * // Returns: null (not namespace-qualified)
 * ```
 */
export declare const extractNamespaceFromQualifiedType: (qualifiedTypeName: string) => {
    namespace: string;
    typeName: string;
} | null;
/**
 * Finds namespace import information for a given namespace name
 *
 * @param namespaceName - The namespace name to find (e.g., 'ts')
 * @param sourceFile - The source file to search in
 * @param sourceFiles - All source files for context
 * @returns ImportInfo for the namespace, or null if not found
 *
 * @example
 * ```typescript
 * const namespaceImport = findNamespaceImport('ts', sourceFile, sourceFiles);
 * // Returns: { typeName: 'ts', importPath: 'typescript', isNamespace: true, ... }
 * ```
 */
export declare const findNamespaceImport: (namespaceName: string, sourceFile: ts.SourceFile, sourceFiles: ts.SourceFile[]) => ImportInfo | null;
/**
 * Checks if a type is exported as default from a source file
 *
 * @param typeName - The name of the type to check (e.g., 'User', 'Product')
 * @param sourceFile - The TypeScript source file to search in
 * @returns true if the type is exported as default, false otherwise
 *
 * @example
 * ```typescript
 * // For a file with default export:
 * const sourceCode = `
 * export default interface User {
 *   id: string;
 *   name: string;
 * }
 * `;
 *
 * const sourceFile = ts.createSourceFile('src/types/User.ts', sourceCode, ts.ScriptTarget.Latest);
 * const isDefault = isDefaultExport('User', sourceFile);
 * // Returns: true
 *
 * // For a file with named export:
 * const sourceCode2 = `
 * export interface Product {
 *   id: string;
 *   name: string;
 * }
 * `;
 *
 * const sourceFile2 = ts.createSourceFile('src/types/Product.ts', sourceCode2, ts.ScriptTarget.Latest);
 * const isDefault2 = isDefaultExport('Product', sourceFile2);
 * // Returns: false
 *
 * // For a file with export default assignment:
 * const sourceCode3 = `
 * interface Config {
 *   apiUrl: string;
 * }
 *
 * export default Config;
 * `;
 *
 * const sourceFile3 = ts.createSourceFile('src/types/Config.ts', sourceCode3, ts.ScriptTarget.Latest);
 * const isDefault3 = isDefaultExport('Config', sourceFile3);
 * // Returns: true
 * ```
 */
export declare const isDefaultExport: (typeName: string, sourceFile: ts.SourceFile) => boolean;
//# sourceMappingURL=import-extractors.d.ts.map