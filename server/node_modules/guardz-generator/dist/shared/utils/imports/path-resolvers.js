"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTypeDefinedInFile = exports.resolveRelativePath = exports.getTypeGuardImportPath = exports.getTypeGuardImportPathFromFile = exports.cleanImportPath = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const ts = __importStar(require("typescript"));
const logging_1 = require("../logging");
const types_1 = require("../types");
const import_extractors_1 = require("./import-extractors");
// Import the utility functions from import-extractors to avoid duplication
// These functions are already implemented with comprehensive logging in import-extractors.ts
// Note: We need to create a local wrapper since these functions are not exported from import-extractors
// Local implementation of resolveGlobalPath for this file's needs
const resolveGlobalPath = (importPath, currentSourceFile) => {
    // Find project root by looking for tsconfig.json in parent directories
    let projectRoot = path.dirname(currentSourceFile.fileName);
    while (projectRoot !== path.dirname(projectRoot)) {
        if (fs.existsSync(path.join(projectRoot, 'tsconfig.json'))) {
            break;
        }
        projectRoot = path.dirname(projectRoot);
    }
    // Read tsconfig path mappings
    const pathMappings = new Map();
    try {
        const tsconfigPath = path.join(projectRoot, 'tsconfig.json');
        if (fs.existsSync(tsconfigPath)) {
            const tsconfig = JSON.parse(fs.readFileSync(tsconfigPath, 'utf8'));
            if (tsconfig.compilerOptions?.paths) {
                for (const [pattern, paths] of Object.entries(tsconfig.compilerOptions.paths)) {
                    if (Array.isArray(paths)) {
                        pathMappings.set(pattern, paths);
                    }
                }
            }
        }
    }
    catch {
        // Ignore tsconfig parsing errors
    }
    // Check if the import path matches any tsconfig path mapping
    for (const [pattern, paths] of pathMappings) {
        const regexPattern = pattern
            .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
            .replace(/\\\*/g, '.*');
        const regex = new RegExp(`^${regexPattern}$`);
        if (regex.test(importPath)) {
            const mappedPath = paths[0];
            if (mappedPath) {
                const result = importPath.replace(pattern.replace('*', ''), mappedPath.replace('*', ''));
                return result;
            }
        }
    }
    return null;
};
// Helper function to extract base type name from type guard name
const extractBaseTypeName = (typeGuardName) => {
    if (/^is[A-Z]/.test(typeGuardName)) {
        const baseName = typeGuardName.slice(2);
        return baseName.charAt(0).toUpperCase() + baseName.slice(1);
    }
    return typeGuardName;
};
// Utility function to clean up redundant './' prefixes in import paths
const cleanImportPath = (importPath) => {
    // Replace patterns like './../' with '../' and '././' with './'
    return importPath
        .replace(/^\.\/\.\.\//g, '../') // './../' -> '../'
        .replace(/^\.\/\.\//g, './') // '././' -> './'
        .replace(/^\.\/\.\.\.\//g, '../../') // './../../' -> '../../'
        .replace(/^\.\/\.\.\.\.\//g, '../../../'); // './../../../' -> '../../../'
};
exports.cleanImportPath = cleanImportPath;
// Get the import path for a type guard based on its file location
const getTypeGuardImportPathFromFile = (guardFilePath, outputDir) => {
    const relativePath = path
        .relative(outputDir, guardFilePath)
        .replace(/\\/g, '/')
        .replace(/\.ts$/, '');
    const importPath = './' + relativePath;
    return (0, exports.cleanImportPath)(importPath);
};
exports.getTypeGuardImportPathFromFile = getTypeGuardImportPathFromFile;
// Cache to prevent multiple calculations of the same import path
// Key: cache key (typeGuardName:outputDir:sourceFile), Value: Record<sourceFile, importPath>
const importPathCache = new Map();
const getTypeGuardImportPath = (typeGuardName, importMap, outputDir, _sourceFiles, currentSourceFile) => {
    // Create a cache key based on the function parameters (without source file)
    const cacheKey = `${typeGuardName}:${outputDir}`;
    const sourceFileKey = currentSourceFile?.fileName || 'no-file';
    // Check if we've already calculated this import path for this source file
    if (importPathCache.has(cacheKey)) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const cachedResults = importPathCache.get(cacheKey);
        if (cachedResults[sourceFileKey] !== undefined) {
            const cachedResult = cachedResults[sourceFileKey];
            (0, logging_1.log)(`[getTypeGuardImportPath] Using cached result for "${typeGuardName}" from "${sourceFileKey}": "${cachedResult}"`);
            return cachedResult;
        }
    }
    (0, logging_1.log)(`[getTypeGuardImportPath] Input: typeGuardName = "${typeGuardName}", outputDir = "${outputDir}", currentSourceFile = "${currentSourceFile?.fileName}"`);
    (0, logging_1.log)(`[getTypeGuardImportPath] Import map size: ${importMap.size}`);
    (0, logging_1.log)(`[getTypeGuardImportPath] Cache key: "${cacheKey}", source file key: "${sourceFileKey}"`);
    const importInfo = importMap.get(typeGuardName);
    if (!importInfo) {
        (0, logging_1.log)(`[getTypeGuardImportPath] No import info found for "${typeGuardName}"`);
        (0, logging_1.log)(`[getTypeGuardImportPath] Available keys in import map: [${Array.from(importMap.keys()).join(', ')}]`);
        // Cache null results too
        if (!importPathCache.has(cacheKey)) {
            importPathCache.set(cacheKey, {});
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        importPathCache.get(cacheKey)[sourceFileKey] = null;
        return null;
    }
    (0, logging_1.log)(`[getTypeGuardImportPath] Found import info:`, importInfo);
    (0, logging_1.log)(`[getTypeGuardImportPath] Import type: ${importInfo.importType}`);
    (0, logging_1.log)(`[getTypeGuardImportPath] Import path:`, importInfo.importPath);
    (0, logging_1.log)(`[getTypeGuardImportPath] Is default: ${importInfo.isDefault}`);
    const baseTypeName = extractBaseTypeName(typeGuardName);
    const guardFileName = `is${baseTypeName}`;
    (0, logging_1.log)(`[getTypeGuardImportPath] Extracted base type name: "${baseTypeName}"`);
    (0, logging_1.log)(`[getTypeGuardImportPath] Guard file name: "${guardFileName}"`);
    (0, logging_1.log)(`[getTypeGuardImportPath] Original import path: "${currentSourceFile && importInfo.importPath[currentSourceFile.fileName]}"`);
    // Get the import path for the current source file, or calculate based on type source file
    const originalPath = currentSourceFile && importInfo.importPath[currentSourceFile.fileName]
        ? importInfo.importPath[currentSourceFile.fileName]
        : currentSourceFile
            ? (() => {
                // Find the source file that contains the type definition
                const typeSourceFile = (0, types_1.findTypeSourceFile)(baseTypeName, _sourceFiles);
                if (typeSourceFile) {
                    // Calculate relative path from current source file to type guard location
                    const typeGuardPath = path.join(path.dirname(typeSourceFile), `${guardFileName}.guardz.ts`);
                    return (0, exports.getTypeGuardImportPathFromFile)(typeGuardPath, path.dirname(currentSourceFile.fileName));
                }
                return '';
            })()
            : '';
    // If this is a node module import, return null to use isAsserted<Type>
    (0, logging_1.log)(`[getTypeGuardImportPath] Checking if node module import: ${importInfo.importType}`);
    if (importInfo.importType ===
        import_extractors_1.ImportTypeEnum.FROM_NODE_MODULES_WITHOUT_TYPE_GUARD ||
        importInfo.importType ===
            import_extractors_1.ImportTypeEnum.FROM_NODE_MODULES_WITH_TYPE_GUARD_FROM_NODE_MODULES ||
        importInfo.importType ===
            import_extractors_1.ImportTypeEnum.FROM_NODE_MODULES_WITH_TYPE_GUARD_FROM_GLOBAL) {
        (0, logging_1.log)(`[getTypeGuardImportPath] Node module import detected (${importInfo.importType}), returning null for isAsserted usage`);
        // Cache the result
        if (!importPathCache.has(cacheKey)) {
            importPathCache.set(cacheKey, {});
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        importPathCache.get(cacheKey)[sourceFileKey] = null;
        return null;
    }
    // Resolve path aliases if present
    if (currentSourceFile) {
        (0, logging_1.log)(`[getTypeGuardImportPath] Resolving global path for: "${originalPath}"`);
        const globalPath = resolveGlobalPath(originalPath, currentSourceFile);
        if (globalPath) {
            (0, logging_1.log)(`[getTypeGuardImportPath] Global path resolved: "${originalPath}" -> "${globalPath}"`);
            importInfo.importType = import_extractors_1.ImportTypeEnum.FROM_GLOBAL_PATH;
        }
        else {
            (0, logging_1.log)(`[getTypeGuardImportPath] No global path resolution for: "${originalPath}"`);
        }
    }
    // Convert the resolved import path to a type guard import path
    const basePath = originalPath.replace(/\.(ts|js|tsx|jsx)$/, '');
    (0, logging_1.log)(`[getTypeGuardImportPath] Base path after extension removal: "${basePath}"`);
    (0, logging_1.log)(`[getTypeGuardImportPath] baseTypeName = "${baseTypeName}", guardFileName = "${guardFileName}", basePath = "${basePath}"`);
    let result;
    if (importInfo.importType === import_extractors_1.ImportTypeEnum.FROM_GLOBAL_PATH) {
        // For global paths, use the resolved path structure
        const pathParts = basePath.split('/');
        const directory = pathParts.slice(0, -1).join('/');
        result = directory
            ? `${directory}/${guardFileName}.guardz`
            : `${guardFileName}.guardz`;
        (0, logging_1.log)(`[getTypeGuardImportPath] Global path import - using resolved structure: "${result}"`);
    }
    else {
        // For relative paths, we need to calculate the correct relative path
        // from the current output file to the type guard file
        const pathParts = basePath.split('/');
        const directory = pathParts.slice(0, -1).join('/');
        if (directory) {
            result = `${directory}/${guardFileName}.guardz`;
        }
        else {
            result = `./${guardFileName}.guardz`;
        }
        (0, logging_1.log)(`[getTypeGuardImportPath] Relative path import - calculated path: "${result}"`);
    }
    // Cache the result
    if (!importPathCache.has(cacheKey)) {
        importPathCache.set(cacheKey, {});
    }
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    importPathCache.get(cacheKey)[sourceFileKey] = result;
    (0, logging_1.log)(`[getTypeGuardImportPath] Cached result for "${typeGuardName}" from "${sourceFileKey}": "${result}"`);
    (0, logging_1.log)(`[getTypeGuardImportPath] Output: "${result}"`);
    return result;
};
exports.getTypeGuardImportPath = getTypeGuardImportPath;
// Helper function to resolve relative paths
const resolveRelativePath = (basePath, relativePath, outputDir) => {
    const resolvedPath = path.resolve(basePath, relativePath);
    const relativePathResult = path
        .relative(outputDir, resolvedPath)
        .replace(/\\/g, '/')
        .replace(/\.(ts|js|tsx|jsx)$/, '');
    return (0, exports.cleanImportPath)('./' + relativePathResult);
};
exports.resolveRelativePath = resolveRelativePath;
// Helper function to check if a type is defined in current file
const isTypeDefinedInFile = (typeName, sourceFile) => {
    let isDefined = false;
    ts.forEachChild(sourceFile, (node) => {
        if ((ts.isInterfaceDeclaration(node) ||
            ts.isEnumDeclaration(node) ||
            ts.isTypeAliasDeclaration(node)) &&
            node.name &&
            node.name.text === typeName) {
            isDefined = true;
        }
    });
    return isDefined;
};
exports.isTypeDefinedInFile = isTypeDefinedInFile;
//# sourceMappingURL=path-resolvers.js.map