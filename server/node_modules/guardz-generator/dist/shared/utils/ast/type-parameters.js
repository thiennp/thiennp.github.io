"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatTypeParameter = exports.extractTypeParametersFromInterface = exports.extractTypeParameters = void 0;
// Extract type parameters from type alias declarations
const extractTypeParameters = (typeAliasDecl) => {
    const typeParameters = [];
    if (typeAliasDecl.typeParameters) {
        typeAliasDecl.typeParameters.forEach((typeParam) => {
            typeParameters.push({
                name: typeParam.name.text,
                constraint: typeParam.constraint,
                default: typeParam.default,
            });
        });
    }
    return typeParameters;
};
exports.extractTypeParameters = extractTypeParameters;
// Extract type parameters from interface declarations
const extractTypeParametersFromInterface = (interfaceDecl) => {
    const typeParameters = [];
    if (interfaceDecl.typeParameters) {
        interfaceDecl.typeParameters.forEach((typeParam) => {
            typeParameters.push({
                name: typeParam.name.text,
                constraint: typeParam.constraint,
                default: typeParam.default,
            });
        });
    }
    return typeParameters;
};
exports.extractTypeParametersFromInterface = extractTypeParametersFromInterface;
// Format a type parameter for display
const formatTypeParameter = (typeParam) => {
    let result = typeParam.name;
    if (typeParam.constraint) {
        const constraintText = typeParam.constraint.getText();
        result += ` extends ${constraintText}`;
    }
    if (typeParam.default) {
        const defaultText = typeParam.default.getText();
        result += ` = ${defaultText}`;
    }
    return result;
};
exports.formatTypeParameter = formatTypeParameter;
//# sourceMappingURL=type-parameters.js.map