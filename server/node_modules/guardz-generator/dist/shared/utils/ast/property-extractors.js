"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractIndexSignatureTypes = exports.extractIndexSignatureType = exports.hasOnlyIndexSignatures = exports.extractHeritageClauses = exports.extractPropertiesWithInheritance = exports.extractPropertiesFromTypeLiteral = exports.extractProperties = void 0;
const ts = __importStar(require("typescript"));
// Extract properties from interface declarations
const extractProperties = (interfaceDecl) => {
    const properties = [];
    interfaceDecl.members.forEach((member) => {
        if (ts.isPropertySignature(member) && member.name) {
            const name = member.name.getText();
            const type = member.type;
            const isOptional = member.questionToken !== undefined;
            if (type) {
                properties.push({ name, type, isOptional });
            }
        }
    });
    return properties;
};
exports.extractProperties = extractProperties;
// Extract properties from type literal nodes
const extractPropertiesFromTypeLiteral = (typeLiteral) => {
    const properties = [];
    typeLiteral.members.forEach((member) => {
        // Skip index signatures like [k: string]: unknown
        if (ts.isIndexSignatureDeclaration(member)) {
            return;
        }
        if (ts.isPropertySignature(member) && member.name) {
            const name = member.name.getText();
            const type = member.type;
            const isOptional = member.questionToken !== undefined;
            if (type) {
                properties.push({ name, type, isOptional });
            }
        }
    });
    return properties;
};
exports.extractPropertiesFromTypeLiteral = extractPropertiesFromTypeLiteral;
// Extract properties with inheritance from interface declarations
const extractPropertiesWithInheritance = (interfaceDecl, allInterfaces) => {
    const properties = [];
    // First, add properties from inherited interfaces
    const heritageTypes = (0, exports.extractHeritageClauses)(interfaceDecl);
    heritageTypes.forEach(heritageType => {
        const baseInterface = allInterfaces.find(int => int.name.text === heritageType);
        if (baseInterface) {
            const baseProperties = (0, exports.extractPropertiesWithInheritance)(baseInterface, allInterfaces);
            properties.push(...baseProperties);
        }
    });
    // Then add properties from the current interface
    const currentProperties = (0, exports.extractProperties)(interfaceDecl);
    properties.push(...currentProperties);
    return properties;
};
exports.extractPropertiesWithInheritance = extractPropertiesWithInheritance;
// Extract heritage clauses from interface declarations
const extractHeritageClauses = (interfaceDecl) => {
    const heritageTypes = [];
    if (interfaceDecl.heritageClauses) {
        interfaceDecl.heritageClauses.forEach(heritageClause => {
            if (heritageClause.token === ts.SyntaxKind.ExtendsKeyword) {
                heritageClause.types.forEach(typeRef => {
                    heritageTypes.push(typeRef.expression.getText());
                });
            }
        });
    }
    return heritageTypes;
};
exports.extractHeritageClauses = extractHeritageClauses;
// Check if interface has only index signatures
const hasOnlyIndexSignatures = (interfaceDecl) => {
    const hasIndexSignature = interfaceDecl.members.some(member => ts.isIndexSignatureDeclaration(member));
    const hasPropertySignature = interfaceDecl.members.some(member => ts.isPropertySignature(member));
    return hasIndexSignature && !hasPropertySignature;
};
exports.hasOnlyIndexSignatures = hasOnlyIndexSignatures;
// Extract index signature type from interface
const extractIndexSignatureType = (interfaceDecl) => {
    for (const member of interfaceDecl.members) {
        if (ts.isIndexSignatureDeclaration(member)) {
            return member.type || null;
        }
    }
    return null;
};
exports.extractIndexSignatureType = extractIndexSignatureType;
// Extract index signature key and value types from interface
const extractIndexSignatureTypes = (interfaceDecl) => {
    for (const member of interfaceDecl.members) {
        if (ts.isIndexSignatureDeclaration(member)) {
            const keyParameter = member.parameters[0];
            const keyType = keyParameter?.type || null;
            const valueType = member.type || null;
            return { keyType, valueType };
        }
    }
    return { keyType: null, valueType: null };
};
exports.extractIndexSignatureTypes = extractIndexSignatureTypes;
//# sourceMappingURL=property-extractors.js.map