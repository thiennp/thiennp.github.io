"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostProcessingError = exports.TypeScriptCompilationError = exports.ConfigurationError = exports.FileNotFoundError = exports.TypeGuardGenerationError = void 0;
exports.createTypeGuardError = createTypeGuardError;
// Domain-specific error types for better error handling
const guardz_1 = require("guardz");
class TypeGuardGenerationError extends Error {
    code;
    constructor(message, code) {
        super(message);
        this.code = code;
        this.name = 'TypeGuardGenerationError';
    }
}
exports.TypeGuardGenerationError = TypeGuardGenerationError;
/**
 * Enhanced error utility that uses guardz's generateTypeGuardError for better error messages
 */
function createTypeGuardError(value, identifier, expectedType, code = 'TYPE_GUARD_ERROR') {
    const detailedMessage = (0, guardz_1.generateTypeGuardError)(value, identifier, expectedType);
    return new TypeGuardGenerationError(detailedMessage, code);
}
class FileNotFoundError extends Error {
    constructor(filePath) {
        super(`File not found: ${filePath}`);
        this.name = 'FileNotFoundError';
    }
}
exports.FileNotFoundError = FileNotFoundError;
class ConfigurationError extends Error {
    constructor(message) {
        super(`Configuration error: ${message}`);
        this.name = 'ConfigurationError';
    }
}
exports.ConfigurationError = ConfigurationError;
class TypeScriptCompilationError extends Error {
    constructor(message) {
        super(`TypeScript compilation error: ${message}`);
        this.name = 'TypeScriptCompilationError';
    }
}
exports.TypeScriptCompilationError = TypeScriptCompilationError;
class PostProcessingError extends Error {
    constructor(message) {
        super(`Post-processing error: ${message}`);
        this.name = 'PostProcessingError';
    }
}
exports.PostProcessingError = PostProcessingError;
//# sourceMappingURL=index.js.map