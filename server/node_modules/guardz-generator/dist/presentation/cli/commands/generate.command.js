#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const commander_1 = require("commander");
const ts = __importStar(require("typescript"));
const type_guard_generator_1 = require("../../../core/generators/type-guard/type-guard-generator");
const service_factory_1 = require("../../../infrastructure/factories/service-factory");
const logging_1 = require("../../../shared/utils/logging");
const program = new commander_1.Command();
program
    .name('guardz-generator')
    .description('Advanced TypeScript type guard generator with sophisticated recursion detection and enhanced enum handling using guardz library')
    .version('1.9.0')
    .option('-c, --config <path>', 'Path to config file (defaults to guardz.generator.config.ts in project root)');
program
    .command('generate')
    .description('Generate type guards from TypeScript files with support for direct/indirect recursion and enums' +
    '\n\nSupports config file: guardz.generator.config.ts in project root. Config can specify includes/excludes.')
    .argument('[files...]', 'TypeScript files to process (can specify multiple files)')
    .option('-c, --config <path>', 'Path to config file (defaults to guardz.generator.config.ts in project root)')
    .option('-n, --name <name>', 'Custom name for the type guard function')
    .option('-t, --type <type>', 'Generate type guard for specific type')
    .option('--no-post-process', 'Skip running lint, prettier, and tsc on generated files')
    .option('--includes <patterns...>', 'Glob patterns for files to include')
    .option('--excludes <patterns...>', 'Glob patterns for files to exclude')
    .option('--verbose', 'Enable verbose logging')
    .option('--debug', 'Enable debug logging (creates log file)')
    .action(async (files, options) => {
    try {
        // Set verbose mode based on CLI flag
        (0, logging_1.setVerboseMode)(!!options.verbose);
        // Set debug mode based on CLI flag
        (0, logging_1.setDebugMode)(!!options.debug);
        // Use the file discovery pipeline
        const fileDiscoveryPipeline = service_factory_1.ServiceFactory.getFileDiscoveryPipeline();
        const discoveryOptions = {
            cliFiles: files,
            cliIncludes: options.includes,
            cliExcludes: options.excludes,
            configPath: options.config,
        };
        const discoveryResult = await fileDiscoveryPipeline.discoverFiles(discoveryOptions);
        if (discoveryResult.files.length === 0) {
            console.error(`No files found from ${discoveryResult.source} source. Please provide files argument, configure includes in guardz.generator.config.ts, or ensure tsconfig.json exists.`);
            process.exit(1);
        }
        console.log(`Found ${discoveryResult.files.length} files from ${discoveryResult.source} source:`, discoveryResult.files);
        let configOptions = {};
        if (options.config) {
            try {
                const imported = await Promise.resolve(`${options.config}`).then(s => __importStar(require(s)));
                configOptions = imported.default || imported;
            }
            catch {
                // Config file doesn't exist, continue with default options
            }
        }
        // Merge CLI options with config (CLI takes precedence)
        const mergedOptions = {
            ...configOptions,
            ...options,
        };
        // Use the TypeScript program pipeline to create the program
        const programPipeline = service_factory_1.ServiceFactory.getTypeScriptProgramPipeline();
        const programOptions = {
            sourceFiles: discoveryResult.files,
            compilerOptions: {
                target: ts.ScriptTarget.ES2020,
                module: ts.ModuleKind.CommonJS,
                strict: true,
                esModuleInterop: true,
                skipLibCheck: true,
            },
            formatting: {
                enabled: options.postProcess !== false,
                typeCheck: true,
                eslintFix: true,
            },
        };
        const programResult = await programPipeline.createProgram(programOptions);
        const generator = new type_guard_generator_1.TypeGuardGenerator(discoveryResult.files, programResult.program);
        if (mergedOptions.type) {
            // Generate type guard for specific type
            const typeGuardCode = generator.generateTypeGuard(mergedOptions.type, mergedOptions);
            console.log('Generated type guard:');
            console.log(typeGuardCode);
            // Also write the file to the same directory as source files
            const sourceFile = discoveryResult.files[0];
            const sourceDir = path.dirname(sourceFile);
            const fileName = `is${mergedOptions.type}.guardz.ts`;
            const filePath = path.join(sourceDir, fileName);
            // Ensure the directory exists
            await fs.promises.mkdir(path.dirname(filePath), { recursive: true });
            // Write the file
            await fs.promises.writeFile(filePath, typeGuardCode, 'utf8');
            console.log(`\nType guard written to: ${filePath}`);
        }
        else {
            // Generate type guards for all interfaces and type aliases
            const generatedFiles = generator.generateAllTypeGuards(mergedOptions);
            if (generatedFiles.length === 0) {
                console.log('No exported interfaces or type aliases found.');
                return;
            }
            console.log(`Generated ${generatedFiles.length} type guards:`);
            generatedFiles.forEach(file => {
                console.log(`  - ${file.interfaceName} -> ${file.fileName}`);
            });
            // Write files to same directory as source files
            await generator.writeTypeGuardsToSameDirectory(generatedFiles);
            console.log(`\nType guards written to source directories`);
            // Run formatting if enabled (default: true)
            const shouldFormat = options.postProcess !== false;
            if (shouldFormat) {
                console.log('\nRunning formatting on generated files...');
                const filePaths = generatedFiles.map(file => file.fileName);
                await programPipeline.formatGeneratedFiles(filePaths, {
                    typeCheck: true,
                    eslintFix: true,
                });
            }
        }
    }
    catch (error) {
        console.error('Error:', error.message);
        process.exit(1);
    }
});
// Make generate the default command
program.action(async (options) => {
    // If no command is specified, run generate
    const args = ['', '', 'generate'];
    // Pass through any options from the main program
    if (options.config) {
        args.push('--config', options.config);
    }
    // Add any other arguments
    args.push(...process.argv.slice(2));
    await program.parseAsync(args);
});
program.parse();
//# sourceMappingURL=generate.command.js.map