import type { ImportInfo } from '../../../domain/types';
import type * as ts from 'typescript';
export declare class FileGenerationAdapter {
    generateInterfaceFile(interfaceDecl: ts.InterfaceDeclaration, guardName: string, outputDir: string, sourceFiles: ts.SourceFile[], allInterfaces: ts.InterfaceDeclaration[], importMap: Map<string, ImportInfo>): import("../../../domain/types").GeneratedFile;
    generateTypeAliasFile(typeAliasDecl: ts.TypeAliasDeclaration, guardName: string, outputDir: string, sourceFiles: ts.SourceFile[], importMap: Map<string, ImportInfo>): import("../../../domain/types").GeneratedFile;
    generateCompleteFile(guardName: string, typeGuardCode: string, typeName: string, importTypes: string[], fileName: string, outputDir: string, sourceFiles: ts.SourceFile[], hasGenerics: boolean | undefined, importMap: Map<string, ImportInfo>, sourceFile: ts.SourceFile): string;
    generateInterfaceTypeGuard(interfaceDecl: ts.InterfaceDeclaration, guardName: string, allInterfaces: ts.InterfaceDeclaration[], sourceFiles: ts.SourceFile[], importMap: Map<string, ImportInfo>): string;
    generateGenericInterfaceTypeGuard(interfaceDecl: ts.InterfaceDeclaration, guardName: string, allInterfaces: ts.InterfaceDeclaration[], sourceFiles: ts.SourceFile[], importMap: Map<string, ImportInfo>): string;
    generateTypeAliasTypeGuard(typeAliasDecl: ts.TypeAliasDeclaration, guardName: string, sourceFiles: ts.SourceFile[]): string;
}
//# sourceMappingURL=file-generation.adapter.d.ts.map