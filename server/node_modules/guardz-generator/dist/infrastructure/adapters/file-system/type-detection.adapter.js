"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeDetectionAdapter = void 0;
const ts = __importStar(require("typescript"));
const file_1 = require("../../../core/generators/file");
const types_1 = require("../../../shared/utils/types");
class TypeDetectionAdapter {
    sourceFiles;
    allInterfaces;
    constructor(sourceFiles) {
        this.sourceFiles = sourceFiles;
        this.allInterfaces = this.collectAllInterfaces();
    }
    collectAllInterfaces() {
        const interfaces = [];
        this.sourceFiles.forEach(sourceFile => {
            const visit = (node) => {
                if (ts.isInterfaceDeclaration(node)) {
                    interfaces.push(node);
                }
                ts.forEachChild(node, visit);
            };
            visit(sourceFile);
        });
        return interfaces;
    }
    collectAllDeclarations() {
        return (0, file_1.collectAllDeclarations)(this.sourceFiles);
    }
    findInterfaceWithSourceFile(typeName) {
        return (0, types_1.findInterfaceWithSourceFile)(typeName, this.sourceFiles);
    }
    findTypeAliasWithSourceFile(typeName) {
        return (0, types_1.findTypeAliasWithSourceFile)(typeName, this.sourceFiles);
    }
    getAllInterfaces() {
        return this.allInterfaces;
    }
    isEnumType(typeName) {
        return (0, types_1.isEnumType)(typeName, this.sourceFiles);
    }
    isInterfaceType(typeName) {
        return (0, types_1.isInterfaceType)(typeName, this.sourceFiles);
    }
    isBuiltInType(typeName) {
        return (0, types_1.isBuiltInType)(typeName);
    }
    isTypeAlias(typeName) {
        return (0, types_1.isTypeAlias)(typeName);
    }
    findTypeSourceFile(typeName) {
        return (0, types_1.findTypeSourceFile)(typeName, this.sourceFiles);
    }
}
exports.TypeDetectionAdapter = TypeDetectionAdapter;
//# sourceMappingURL=type-detection.adapter.js.map