import { CliDiscoveryStrategy } from './strategies/cli-discovery-strategy/cli-discovery-strategy';
import { ConfigDiscoveryStrategy } from './strategies/config-discovery-strategy/config-discovery-strategy';
import { TsConfigDiscoveryStrategy } from './strategies/tsconfig-discovery-strategy/tsconfig-discovery-strategy';
import type { FileDiscoveryOptions, FileDiscoveryResult } from './interfaces';
/**
 * File Discovery Pipeline
 *
 * Orchestrates multiple file discovery strategies to find TypeScript files for type guard generation.
 * Strategies are executed in priority order: CLI → Config → tsconfig, with later strategies
 * being used as fallbacks if earlier strategies don't provide files.
 */
export declare class FileDiscoveryPipeline {
    private readonly cliStrategy;
    private readonly configStrategy;
    private readonly tsConfigStrategy;
    constructor();
    /**
     * Main entry point for file discovery
     * @param options Configuration options for file discovery
     * @returns Promise resolving to discovered files and their source
     */
    discoverFiles(options: FileDiscoveryOptions): Promise<FileDiscoveryResult>;
    /**
     * Check if any strategy has file specifications
     * @param options Configuration options for file discovery
     * @returns Promise resolving to true if any strategy has file specifications
     */
    hasAnyFileSpecifications(options: FileDiscoveryOptions): Promise<boolean>;
    /**
     * Get detailed information about each strategy's file specifications
     * @param options Configuration options for file discovery
     * @returns Promise resolving to strategy information
     */
    getStrategyInfo(options: FileDiscoveryOptions): Promise<{
        cli: {
            hasSpecifications: boolean;
            files?: string[];
        };
        config: {
            hasSpecifications: boolean;
            files?: string[];
        };
        tsconfig: {
            hasSpecifications: boolean;
            files?: string[];
        };
    }>;
    /**
     * Get the strategy instances for advanced usage
     * @returns Object containing all strategy instances
     */
    getStrategies(): {
        cli: CliDiscoveryStrategy;
        config: ConfigDiscoveryStrategy;
        tsconfig: TsConfigDiscoveryStrategy;
    };
}
//# sourceMappingURL=file-discovery-pipeline.d.ts.map