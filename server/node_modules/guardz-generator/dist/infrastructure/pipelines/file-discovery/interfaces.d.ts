/**
 * File Discovery Pipeline Interfaces
 *
 * This file contains all interfaces related to the file discovery pipeline,
 * including options, results, and strategy interfaces.
 */
/**
 * Options for file discovery operations
 */
export interface FileDiscoveryOptions {
    /** CLI file patterns (highest priority) */
    cliFiles?: string[];
    /** CLI include patterns */
    cliIncludes?: string[];
    /** CLI exclude patterns */
    cliExcludes?: string[];
    /** Path to config file */
    configPath?: string;
    /** Path to tsconfig.json file */
    tsConfigPath?: string;
}
/**
 * Result of file discovery operation
 */
export interface FileDiscoveryResult {
    /** Discovered file paths */
    files: string[];
    /** Source of the discovered files */
    source: 'cli' | 'config' | 'tsconfig' | 'combined';
}
/**
 * Interface for file discovery pipeline
 */
export interface IFileDiscoveryPipeline {
    /**
     * Discover files using the configured strategies
     * @param options File discovery options
     * @returns Promise resolving to discovered files and their source
     */
    discoverFiles(options: FileDiscoveryOptions): Promise<FileDiscoveryResult>;
    /**
     * Check if any strategy has file specifications
     * @param options File discovery options
     * @returns Promise resolving to true if any strategy has file specifications
     */
    hasAnyFileSpecifications(options: FileDiscoveryOptions): Promise<boolean>;
    /**
     * Get detailed information about each strategy's file specifications
     * @param options File discovery options
     * @returns Promise resolving to strategy information
     */
    getStrategyInfo(options: FileDiscoveryOptions): Promise<{
        cli: {
            hasSpecifications: boolean;
            files?: string[];
        };
        config: {
            hasSpecifications: boolean;
            files?: string[];
        };
        tsconfig: {
            hasSpecifications: boolean;
            files?: string[];
        };
    }>;
}
/**
 * Interface for file discovery strategies
 */
export interface IFileDiscoveryStrategy {
    /**
     * Discover files using this strategy
     * @param options File discovery options
     * @returns Promise resolving to discovered file paths
     */
    discoverFiles(options: FileDiscoveryOptions): Promise<string[]>;
    /**
     * Check if this strategy has file specifications
     * @param options File discovery options
     * @returns Promise resolving to true if strategy has file specifications
     */
    hasFileSpecifications(options: FileDiscoveryOptions): Promise<boolean> | boolean;
}
//# sourceMappingURL=interfaces.d.ts.map