"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TsConfigDiscoveryStrategy = void 0;
const fs = __importStar(require("fs/promises"));
const path = __importStar(require("path"));
const glob_1 = require("glob");
/**
 * tsconfig Discovery Strategy
 *
 * Discovers TypeScript files from tsconfig.json configuration files.
 * This strategy processes:
 * - Include patterns from tsconfig.json
 * - Exclude patterns from tsconfig.json
 * - Default TypeScript patterns when no includes specified
 *
 * Priority: Lowest - Used as fallback when CLI and config strategies return no files
 */
class TsConfigDiscoveryStrategy {
    /**
     * Discover files from tsconfig.json
     * @param options tsconfig discovery options
     * @returns Promise resolving to discovered file paths
     */
    async discoverFiles(options) {
        const tsConfigPath = options.tsConfigPath
            ? path.resolve(process.cwd(), options.tsConfigPath)
            : path.resolve(process.cwd(), 'tsconfig.json');
        try {
            // Check if tsconfig exists
            await fs.access(tsConfigPath);
            // Read and parse tsconfig
            const tsConfigContent = await fs.readFile(tsConfigPath, 'utf-8');
            const tsConfig = JSON.parse(tsConfigContent);
            const discoveredFiles = [];
            const rootDir = path.dirname(tsConfigPath);
            // Process include patterns from tsconfig
            if (tsConfig.include &&
                Array.isArray(tsConfig.include) &&
                tsConfig.include.length > 0) {
                for (const includePattern of tsConfig.include) {
                    const fullPattern = path.join(rootDir, includePattern);
                    const matched = await (0, glob_1.glob)(fullPattern, {
                        windowsPathsNoEscape: true,
                        ignore: (Array.isArray(tsConfig.exclude)
                            ? tsConfig.exclude
                            : []).map((exclude) => path.join(rootDir, exclude)),
                    });
                    discoveredFiles.push(...matched);
                }
            }
            else {
                // If no includes specified, use default TypeScript patterns
                const defaultPatterns = ['**/*.ts', '**/*.tsx'];
                for (const pattern of defaultPatterns) {
                    const fullPattern = path.join(rootDir, pattern);
                    const matched = await (0, glob_1.glob)(fullPattern, {
                        windowsPathsNoEscape: true,
                        ignore: [
                            '**/node_modules/**',
                            '**/*.d.ts',
                            '**/*.guardz.ts',
                            ...(Array.isArray(tsConfig.exclude) ? tsConfig.exclude : []).map((exclude) => path.join(rootDir, exclude)),
                        ],
                    });
                    discoveredFiles.push(...matched);
                }
            }
            return discoveredFiles;
        }
        catch {
            // tsconfig doesn't exist or is invalid, return empty array
            return [];
        }
    }
    /**
     * Check if tsconfig file exists and has file specifications
     * @param options tsconfig discovery options
     * @returns Promise resolving to true if tsconfig has file specifications
     */
    async hasFileSpecifications(options) {
        const tsConfigPath = options.tsConfigPath
            ? path.resolve(process.cwd(), options.tsConfigPath)
            : path.resolve(process.cwd(), 'tsconfig.json');
        try {
            await fs.access(tsConfigPath);
            const tsConfigContent = await fs.readFile(tsConfigPath, 'utf-8');
            JSON.parse(tsConfigContent);
            // tsconfig always has file specifications (either includes or defaults)
            return true;
        }
        catch {
            return false;
        }
    }
    /**
     * Get the default tsconfig file path
     * @returns Default tsconfig file path
     */
    getDefaultTsConfigPath() {
        return path.resolve(process.cwd(), 'tsconfig.json');
    }
    /**
     * Get default TypeScript patterns
     * @returns Array of default TypeScript file patterns
     */
    getDefaultPatterns() {
        return ['**/*.ts', '**/*.tsx'];
    }
    /**
     * Get default ignore patterns
     * @returns Array of default ignore patterns
     */
    getDefaultIgnorePatterns() {
        return ['**/node_modules/**', '**/*.d.ts', '**/*.guardz.ts'];
    }
}
exports.TsConfigDiscoveryStrategy = TsConfigDiscoveryStrategy;
//# sourceMappingURL=tsconfig-discovery-strategy.js.map