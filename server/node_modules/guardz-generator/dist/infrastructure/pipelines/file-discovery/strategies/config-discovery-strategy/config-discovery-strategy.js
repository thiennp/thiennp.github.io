"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigDiscoveryStrategy = void 0;
const fs = __importStar(require("fs/promises"));
const path = __importStar(require("path"));
const glob_1 = require("glob");
/**
 * Config Discovery Strategy
 *
 * Discovers TypeScript files from configuration files (guardz.generator.config.ts).
 * This strategy processes:
 * - Include patterns from config file
 * - Exclude patterns from config file
 *
 * Priority: Medium - Used when CLI strategy returns no files
 */
class ConfigDiscoveryStrategy {
    /**
     * Discover files from configuration file
     * @param options Config discovery options
     * @returns Promise resolving to discovered file paths
     */
    async discoverFiles(options) {
        const configPath = options.configPath
            ? path.resolve(process.cwd(), options.configPath)
            : path.resolve(process.cwd(), 'guardz.generator.config.ts');
        try {
            // Check if config file exists
            await fs.access(configPath);
            // Import config file
            const imported = await Promise.resolve(`${configPath}`).then(s => __importStar(require(s)));
            const config = imported.default || imported;
            const discoveredFiles = [];
            // Process includes from config
            if (config.includes && Array.isArray(config.includes)) {
                for (const includePattern of config.includes) {
                    const matched = await (0, glob_1.glob)(includePattern, {
                        windowsPathsNoEscape: true,
                    });
                    if (matched && Array.isArray(matched)) {
                        discoveredFiles.push(...matched);
                    }
                }
            }
            // Apply excludes from config
            if (config.excludes && Array.isArray(config.excludes)) {
                const excludedFiles = new Set();
                for (const excludePattern of config.excludes) {
                    const matched = await (0, glob_1.glob)(excludePattern, {
                        windowsPathsNoEscape: true,
                    });
                    if (matched && Array.isArray(matched)) {
                        matched.forEach(file => excludedFiles.add(file));
                    }
                }
                return discoveredFiles.filter(file => !excludedFiles.has(file));
            }
            return discoveredFiles;
        }
        catch {
            // Config file doesn't exist or is invalid, return empty array
            return [];
        }
    }
    /**
     * Check if config file exists and has file specifications
     * @param options Config discovery options
     * @returns Promise resolving to true if config has file specifications
     */
    async hasFileSpecifications(options) {
        const configPath = options.configPath
            ? path.resolve(process.cwd(), options.configPath)
            : path.resolve(process.cwd(), 'guardz.generator.config.ts');
        try {
            await fs.access(configPath);
            const imported = await Promise.resolve(`${configPath}`).then(s => __importStar(require(s)));
            const config = imported.default || imported;
            return !!(config.includes &&
                Array.isArray(config.includes) &&
                config.includes.length > 0);
        }
        catch {
            return false;
        }
    }
    /**
     * Get the default config file path
     * @returns Default config file path
     */
    getDefaultConfigPath() {
        return path.resolve(process.cwd(), 'guardz.generator.config.ts');
    }
}
exports.ConfigDiscoveryStrategy = ConfigDiscoveryStrategy;
//# sourceMappingURL=config-discovery-strategy.js.map