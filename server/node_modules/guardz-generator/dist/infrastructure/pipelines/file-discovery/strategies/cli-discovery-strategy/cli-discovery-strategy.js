"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CliDiscoveryStrategy = void 0;
const glob_1 = require("glob");
/**
 * CLI Discovery Strategy
 *
 * Discovers TypeScript files from command-line interface arguments and options.
 * This strategy processes:
 * - Direct file arguments (e.g., "src/star-star/*.ts")
 * - Include patterns (--includes option)
 * - Exclude patterns (--excludes option)
 *
 * Priority: Highest - CLI arguments take precedence over other sources
 */
class CliDiscoveryStrategy {
    /**
     * Discover files from CLI arguments and options
     * @param options CLI discovery options
     * @returns Promise resolving to discovered file paths
     */
    async discoverFiles(options) {
        const discoveredFiles = [];
        // Process direct file arguments
        if (options.cliFiles && options.cliFiles.length > 0) {
            for (const filePattern of options.cliFiles) {
                const matched = await (0, glob_1.glob)(filePattern, { windowsPathsNoEscape: true });
                discoveredFiles.push(...matched);
            }
        }
        // Process include patterns
        if (options.cliIncludes && options.cliIncludes.length > 0) {
            for (const includePattern of options.cliIncludes) {
                const matched = await (0, glob_1.glob)(includePattern, {
                    windowsPathsNoEscape: true,
                });
                discoveredFiles.push(...matched);
            }
        }
        // Apply exclude patterns
        if (options.cliExcludes && options.cliExcludes.length > 0) {
            const excludedFiles = new Set();
            for (const excludePattern of options.cliExcludes) {
                const matched = await (0, glob_1.glob)(excludePattern, {
                    windowsPathsNoEscape: true,
                });
                matched.forEach(file => excludedFiles.add(file));
            }
            return discoveredFiles.filter(file => !excludedFiles.has(file));
        }
        return discoveredFiles;
    }
    /**
     * Check if CLI strategy has any file specifications
     * @param options CLI discovery options
     * @returns True if CLI has file specifications
     */
    hasFileSpecifications(options) {
        return !!((options.cliFiles && options.cliFiles.length > 0) ||
            (options.cliIncludes && options.cliIncludes.length > 0));
    }
}
exports.CliDiscoveryStrategy = CliDiscoveryStrategy;
//# sourceMappingURL=cli-discovery-strategy.js.map