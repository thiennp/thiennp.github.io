"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileDiscoveryPipeline = void 0;
const cli_discovery_strategy_1 = require("./strategies/cli-discovery-strategy/cli-discovery-strategy");
const config_discovery_strategy_1 = require("./strategies/config-discovery-strategy/config-discovery-strategy");
const tsconfig_discovery_strategy_1 = require("./strategies/tsconfig-discovery-strategy/tsconfig-discovery-strategy");
/**
 * File Discovery Pipeline
 *
 * Orchestrates multiple file discovery strategies to find TypeScript files for type guard generation.
 * Strategies are executed in priority order: CLI → Config → tsconfig, with later strategies
 * being used as fallbacks if earlier strategies don't provide files.
 */
class FileDiscoveryPipeline {
    cliStrategy;
    configStrategy;
    tsConfigStrategy;
    constructor() {
        this.cliStrategy = new cli_discovery_strategy_1.CliDiscoveryStrategy();
        this.configStrategy = new config_discovery_strategy_1.ConfigDiscoveryStrategy();
        this.tsConfigStrategy = new tsconfig_discovery_strategy_1.TsConfigDiscoveryStrategy();
    }
    /**
     * Main entry point for file discovery
     * @param options Configuration options for file discovery
     * @returns Promise resolving to discovered files and their source
     */
    async discoverFiles(options) {
        // Try CLI strategy first (highest priority)
        const cliFiles = await this.cliStrategy.discoverFiles(options);
        if (cliFiles.length > 0) {
            return { files: cliFiles, source: 'cli' };
        }
        // Try config strategy (medium priority)
        const configFiles = await this.configStrategy.discoverFiles(options);
        if (configFiles.length > 0) {
            return { files: configFiles, source: 'config' };
        }
        // Try tsconfig strategy (lowest priority, fallback)
        const tsConfigFiles = await this.tsConfigStrategy.discoverFiles(options);
        if (tsConfigFiles.length > 0) {
            return { files: tsConfigFiles, source: 'tsconfig' };
        }
        // If no files found from any strategy, return empty result
        return { files: [], source: 'combined' };
    }
    /**
     * Check if any strategy has file specifications
     * @param options Configuration options for file discovery
     * @returns Promise resolving to true if any strategy has file specifications
     */
    async hasAnyFileSpecifications(options) {
        // Check CLI strategy
        if (this.cliStrategy.hasFileSpecifications(options)) {
            return true;
        }
        // Check config strategy
        if (await this.configStrategy.hasFileSpecifications(options)) {
            return true;
        }
        // Check tsconfig strategy
        if (await this.tsConfigStrategy.hasFileSpecifications(options)) {
            return true;
        }
        return false;
    }
    /**
     * Get detailed information about each strategy's file specifications
     * @param options Configuration options for file discovery
     * @returns Promise resolving to strategy information
     */
    async getStrategyInfo(options) {
        const cliHasSpecs = this.cliStrategy.hasFileSpecifications(options);
        const configHasSpecs = await this.configStrategy.hasFileSpecifications(options);
        const tsConfigHasSpecs = await this.tsConfigStrategy.hasFileSpecifications(options);
        const result = {
            cli: { hasSpecifications: cliHasSpecs },
            config: { hasSpecifications: configHasSpecs },
            tsconfig: { hasSpecifications: tsConfigHasSpecs },
        };
        // Optionally include actual files for debugging
        if (process.env.NODE_ENV === 'development' || process.env.DEBUG) {
            try {
                result.cli.files = await this.cliStrategy.discoverFiles(options);
                result.config.files = await this.configStrategy.discoverFiles(options);
                result.tsconfig.files =
                    await this.tsConfigStrategy.discoverFiles(options);
            }
            catch {
                // Ignore errors in debug mode
            }
        }
        return result;
    }
    /**
     * Get the strategy instances for advanced usage
     * @returns Object containing all strategy instances
     */
    getStrategies() {
        return {
            cli: this.cliStrategy,
            config: this.configStrategy,
            tsconfig: this.tsConfigStrategy,
        };
    }
}
exports.FileDiscoveryPipeline = FileDiscoveryPipeline;
//# sourceMappingURL=file-discovery-pipeline.js.map