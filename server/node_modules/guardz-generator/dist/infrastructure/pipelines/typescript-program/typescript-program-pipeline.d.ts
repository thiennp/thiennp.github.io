import { CliProgramStrategy } from './strategies/cli-strategy/cli-program-strategy';
import { DefaultProgramStrategy } from './strategies/default-strategy/default-program-strategy';
import { TsConfigProgramStrategy } from './strategies/tsconfig-strategy/tsconfig-program-strategy';
import type { ProgramCreationOptions, ProgramCreationResult } from './interfaces';
import type * as ts from 'typescript';
/**
 * TypeScript Program Creation Pipeline
 *
 * Orchestrates multiple TypeScript program creation strategies to create TypeScript programs
 * for type guard generation. Strategies are executed in priority order: CLI → tsconfig → default,
 * with later strategies being used as fallbacks if earlier strategies fail.
 */
export declare class TypeScriptProgramPipeline {
    private readonly cliStrategy;
    private readonly tsConfigStrategy;
    private readonly defaultStrategy;
    constructor();
    /**
     * Create a TypeScript program using the best available strategy
     * @param options Program creation options
     * @returns Promise resolving to created program result
     */
    createProgram(options: ProgramCreationOptions): Promise<ProgramCreationResult>;
    /**
     * Check if any strategy can create a program
     * @param options Configuration options for program creation
     * @returns Promise resolving to true if any strategy can create a program
     */
    canCreateProgram(options: ProgramCreationOptions): Promise<boolean>;
    /**
     * Get detailed information about each strategy's capabilities
     * @param options Configuration options for program creation
     * @returns Promise resolving to strategy information
     */
    getStrategyInfo(options: ProgramCreationOptions): Promise<{
        cli: {
            canCreate: boolean;
            options?: ts.CompilerOptions;
        };
        tsconfig: {
            canCreate: boolean;
            options?: ts.CompilerOptions;
        };
        default: {
            canCreate: boolean;
            options?: ts.CompilerOptions;
        };
    }>;
    /**
     * Get the strategy instances for advanced usage
     * @returns Object containing all strategy instances
     */
    getStrategies(): {
        cli: CliProgramStrategy;
        tsconfig: TsConfigProgramStrategy;
        default: DefaultProgramStrategy;
    };
    /**
     * Format generated files using Prettier, TypeScript checking, and ESLint
     * @param filePaths Array of file paths to format
     * @param options Formatting options
     * @returns Promise that resolves when formatting is complete
     */
    formatGeneratedFiles(filePaths: string[], options?: {
        typeCheck?: boolean;
        eslintFix?: boolean;
    }): Promise<void>;
}
//# sourceMappingURL=typescript-program-pipeline.d.ts.map