/**
 * TypeScript Program Creation Pipeline Interfaces
 *
 * This file contains all interfaces related to the TypeScript program creation pipeline,
 * including options, results, and strategy interfaces.
 */
import type * as ts from 'typescript';
/**
 * Options for TypeScript program creation operations
 */
export interface ProgramCreationOptions {
    /** Source files to include in the program */
    sourceFiles: string[];
    /** Path to tsconfig.json file */
    tsConfigPath?: string;
    /** Custom compiler options */
    compilerOptions?: ts.CompilerOptions;
    /** Custom CLI options for program creation */
    cliOptions?: {
        target?: string;
        module?: string;
        strict?: boolean;
        esModuleInterop?: boolean;
        skipLibCheck?: boolean;
        [key: string]: unknown;
    };
    /** Formatting options for generated files */
    formatting?: {
        /** Whether to format generated files */
        enabled?: boolean;
        /** Whether to run TypeScript type checking */
        typeCheck?: boolean;
        /** Whether to run ESLint fixes */
        eslintFix?: boolean;
    };
}
/**
 * Result of TypeScript program creation operation
 */
export interface ProgramCreationResult {
    /** Created TypeScript program */
    program: ts.Program;
    /** TypeScript type checker */
    checker: ts.TypeChecker;
    /** Source files included in the program */
    sourceFiles: ts.SourceFile[];
    /** Source of the program creation */
    source: 'cli' | 'tsconfig' | 'default';
    /** Compiler options used */
    compilerOptions: ts.CompilerOptions;
}
/**
 * Interface for TypeScript program creation pipeline
 */
export interface IProgramCreationPipeline {
    /**
     * Create a TypeScript program using the configured strategies
     * @param options Program creation options
     * @returns Promise resolving to created program and its source
     */
    createProgram(options: ProgramCreationOptions): Promise<ProgramCreationResult>;
    /**
     * Check if any strategy can create a program
     * @param options Program creation options
     * @returns Promise resolving to true if any strategy can create a program
     */
    canCreateProgram(options: ProgramCreationOptions): Promise<boolean>;
    /**
     * Get detailed information about each strategy's capabilities
     * @param options Program creation options
     * @returns Promise resolving to strategy information
     */
    getStrategyInfo(options: ProgramCreationOptions): Promise<{
        cli: {
            canCreate: boolean;
            options?: ts.CompilerOptions;
        };
        tsconfig: {
            canCreate: boolean;
            options?: ts.CompilerOptions;
        };
        default: {
            canCreate: boolean;
            options?: ts.CompilerOptions;
        };
    }>;
    /**
     * Format generated files using Prettier, TypeScript checking, and ESLint
     * @param filePaths Array of file paths to format
     * @param options Formatting options
     * @returns Promise that resolves when formatting is complete
     */
    formatGeneratedFiles(filePaths: string[], options?: {
        typeCheck?: boolean;
        eslintFix?: boolean;
    }): Promise<void>;
}
/**
 * Interface for TypeScript program creation strategies
 */
export interface IProgramCreationStrategy {
    /**
     * Create a TypeScript program using this strategy
     * @param options Program creation options
     * @returns Promise resolving to created program result
     */
    createProgram(options: ProgramCreationOptions): Promise<ProgramCreationResult>;
    /**
     * Check if this strategy can create a program
     * @param options Program creation options
     * @returns Promise resolving to true if strategy can create a program
     */
    canCreateProgram(options: ProgramCreationOptions): Promise<boolean>;
}
//# sourceMappingURL=interfaces.d.ts.map