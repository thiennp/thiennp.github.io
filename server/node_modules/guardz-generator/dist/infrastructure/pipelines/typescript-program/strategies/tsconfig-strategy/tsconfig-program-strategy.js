"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TsConfigProgramStrategy = void 0;
const fs = __importStar(require("fs/promises"));
const path = __importStar(require("path"));
const ts = __importStar(require("typescript"));
/**
 * tsconfig Strategy for TypeScript Program Creation
 *
 * Creates TypeScript programs using tsconfig.json configuration files.
 * This strategy has medium priority and is used when a tsconfig.json file is available.
 */
class TsConfigProgramStrategy {
    /**
     * Create a TypeScript program using tsconfig.json
     * @param options Program creation options
     * @returns Promise resolving to created program result
     */
    async createProgram(options) {
        const tsConfigPath = this.resolveTsConfigPath(options.tsConfigPath);
        const configFile = await this.readTsConfigFile(tsConfigPath);
        const compilerOptions = this.parseCompilerOptions(configFile);
        // Use source files from tsconfig if available, otherwise use provided source files
        const sourceFiles = configFile.include?.length
            ? await this.resolveTsConfigFiles(configFile, tsConfigPath)
            : options.sourceFiles;
        const program = ts.createProgram(sourceFiles, compilerOptions);
        const checker = program.getTypeChecker();
        // Get source files from the program
        const programSourceFiles = sourceFiles
            .map(filePath => program.getSourceFile(filePath))
            .filter((sf) => sf !== undefined);
        return {
            program,
            checker,
            sourceFiles: programSourceFiles,
            source: 'tsconfig',
            compilerOptions,
        };
    }
    /**
     * Check if this strategy can create a program
     * @param options Program creation options
     * @returns Promise resolving to true if strategy can create a program
     */
    async canCreateProgram(options) {
        try {
            const tsConfigPath = this.resolveTsConfigPath(options.tsConfigPath);
            await fs.access(tsConfigPath);
            return true;
        }
        catch {
            return false;
        }
    }
    /**
     * Resolve tsconfig.json path
     * @param tsConfigPath Optional tsconfig path
     * @returns Resolved tsconfig path
     */
    resolveTsConfigPath(tsConfigPath) {
        return tsConfigPath || path.resolve(process.cwd(), 'tsconfig.json');
    }
    /**
     * Read and parse tsconfig.json file
     * @param tsConfigPath Path to tsconfig.json
     * @returns Parsed tsconfig configuration
     */
    async readTsConfigFile(tsConfigPath) {
        try {
            const content = await fs.readFile(tsConfigPath, 'utf-8');
            const config = JSON.parse(content);
            return {
                compilerOptions: config.compilerOptions || {},
                include: Array.isArray(config.include) ? config.include : [],
                exclude: Array.isArray(config.exclude) ? config.exclude : [],
            };
        }
        catch (error) {
            throw new Error(`Failed to read tsconfig.json at ${tsConfigPath}: ${error}`);
        }
    }
    /**
     * Parse compiler options from tsconfig
     * @param config Parsed tsconfig configuration
     * @returns Compiler options
     */
    parseCompilerOptions(config) {
        const baseOptions = {
            target: ts.ScriptTarget.ES2020,
            module: ts.ModuleKind.CommonJS,
            strict: true,
            esModuleInterop: true,
            skipLibCheck: true,
            allowSyntheticDefaultImports: true,
            resolveJsonModule: true,
            declaration: false,
            outDir: undefined, // Don't emit files
            noEmit: true, // Only type checking
        };
        // Merge with tsconfig compiler options
        if (config.compilerOptions) {
            Object.assign(baseOptions, config.compilerOptions);
        }
        return baseOptions;
    }
    /**
     * Resolve files from tsconfig include/exclude patterns
     * @param config Parsed tsconfig configuration
     * @param tsConfigPath Path to tsconfig.json
     * @returns Resolved file paths
     */
    async resolveTsConfigFiles(config, tsConfigPath) {
        const tsConfigDir = path.dirname(tsConfigPath);
        const { glob } = await Promise.resolve().then(() => __importStar(require('glob')));
        const includedFiles = [];
        // Process include patterns
        if (config.include?.length) {
            for (const includePattern of config.include) {
                const resolvedPattern = path.resolve(tsConfigDir, includePattern);
                const matched = await glob(resolvedPattern, {
                    windowsPathsNoEscape: true,
                });
                includedFiles.push(...matched);
            }
        }
        // Apply exclude patterns
        if (config.exclude?.length) {
            const excludedFiles = new Set();
            for (const excludePattern of config.exclude) {
                const resolvedPattern = path.resolve(tsConfigDir, excludePattern);
                const matched = await glob(resolvedPattern, {
                    windowsPathsNoEscape: true,
                });
                matched.forEach(file => excludedFiles.add(file));
            }
            return includedFiles.filter(file => !excludedFiles.has(file));
        }
        return includedFiles;
    }
}
exports.TsConfigProgramStrategy = TsConfigProgramStrategy;
//# sourceMappingURL=tsconfig-program-strategy.js.map