"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultProgramStrategy = void 0;
const ts = __importStar(require("typescript"));
/**
 * Default Strategy for TypeScript Program Creation
 *
 * Creates TypeScript programs using default compiler options.
 * This strategy has the lowest priority and is used as a fallback when other strategies fail.
 */
class DefaultProgramStrategy {
    /**
     * Create a TypeScript program using default options
     * @param options Program creation options
     * @returns Promise resolving to created program result
     */
    async createProgram(options) {
        const compilerOptions = this.getDefaultCompilerOptions();
        const program = ts.createProgram(options.sourceFiles, compilerOptions);
        const checker = program.getTypeChecker();
        // Get source files from the program
        const sourceFiles = options.sourceFiles
            .map(filePath => program.getSourceFile(filePath))
            .filter((sf) => sf !== undefined);
        return {
            program,
            checker,
            sourceFiles,
            source: 'default',
            compilerOptions,
        };
    }
    /**
     * Check if this strategy can create a program
     * @param options Program creation options
     * @returns Promise resolving to true if strategy can create a program
     */
    async canCreateProgram(options) {
        // Default strategy can always create a program if source files are provided
        return options.sourceFiles.length > 0;
    }
    /**
     * Get default compiler options
     * @returns Default compiler options
     */
    getDefaultCompilerOptions() {
        return {
            target: ts.ScriptTarget.ES2020,
            module: ts.ModuleKind.CommonJS,
            strict: true,
            esModuleInterop: true,
            skipLibCheck: true,
            allowSyntheticDefaultImports: true,
            resolveJsonModule: true,
            declaration: false,
            outDir: undefined,
            noEmit: true,
        };
    }
}
exports.DefaultProgramStrategy = DefaultProgramStrategy;
//# sourceMappingURL=default-program-strategy.js.map