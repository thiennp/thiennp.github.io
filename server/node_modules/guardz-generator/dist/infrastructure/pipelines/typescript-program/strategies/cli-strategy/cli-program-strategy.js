"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CliProgramStrategy = void 0;
const ts = __importStar(require("typescript"));
/**
 * CLI Strategy for TypeScript Program Creation
 *
 * Creates TypeScript programs using CLI-provided options and custom compiler settings.
 * This strategy has the highest priority and is used when CLI options are provided.
 */
class CliProgramStrategy {
    /**
     * Create a TypeScript program using CLI options
     * @param options Program creation options
     * @returns Promise resolving to created program result
     */
    async createProgram(options) {
        const compilerOptions = this.buildCompilerOptions(options);
        const program = ts.createProgram(options.sourceFiles, compilerOptions);
        const checker = program.getTypeChecker();
        // Get source files from the program
        const sourceFiles = options.sourceFiles
            .map(filePath => program.getSourceFile(filePath))
            .filter((sf) => sf !== undefined);
        return {
            program,
            checker,
            sourceFiles,
            source: 'cli',
            compilerOptions,
        };
    }
    /**
     * Check if this strategy can create a program
     * @param options Program creation options
     * @returns Promise resolving to true if strategy can create a program
     */
    async canCreateProgram(options) {
        // CLI strategy can always create a program if source files are provided
        return options.sourceFiles.length > 0;
    }
    /**
     * Build compiler options from CLI options
     * @param options Program creation options
     * @returns Compiler options
     */
    buildCompilerOptions(options) {
        const baseOptions = {
            target: ts.ScriptTarget.ES2020,
            module: ts.ModuleKind.CommonJS,
            strict: true,
            esModuleInterop: true,
            skipLibCheck: true,
            allowSyntheticDefaultImports: true,
            resolveJsonModule: true,
            declaration: false,
            outDir: undefined, // Don't emit files
            noEmit: true, // Only type checking
        };
        // Merge with custom compiler options
        if (options.compilerOptions) {
            Object.assign(baseOptions, options.compilerOptions);
        }
        // Merge with CLI options
        if (options.cliOptions) {
            if (options.cliOptions.target) {
                baseOptions.target = this.parseTarget(options.cliOptions.target);
            }
            if (options.cliOptions.module) {
                baseOptions.module = this.parseModule(options.cliOptions.module);
            }
            if (options.cliOptions.strict !== undefined) {
                baseOptions.strict = options.cliOptions.strict;
            }
            if (options.cliOptions.esModuleInterop !== undefined) {
                baseOptions.esModuleInterop = options.cliOptions.esModuleInterop;
            }
            if (options.cliOptions.skipLibCheck !== undefined) {
                baseOptions.skipLibCheck = options.cliOptions.skipLibCheck;
            }
        }
        return baseOptions;
    }
    /**
     * Parse target string to ScriptTarget
     * @param target Target string
     * @returns ScriptTarget
     */
    parseTarget(target) {
        switch (target.toLowerCase()) {
            case 'es3':
                return ts.ScriptTarget.ES3;
            case 'es5':
                return ts.ScriptTarget.ES5;
            case 'es6':
            case 'es2015':
                return ts.ScriptTarget.ES2015;
            case 'es2016':
                return ts.ScriptTarget.ES2016;
            case 'es2017':
                return ts.ScriptTarget.ES2017;
            case 'es2018':
                return ts.ScriptTarget.ES2018;
            case 'es2019':
                return ts.ScriptTarget.ES2019;
            case 'es2020':
                return ts.ScriptTarget.ES2020;
            case 'es2021':
                return ts.ScriptTarget.ES2021;
            case 'es2022':
                return ts.ScriptTarget.ES2022;
            case 'esnext':
                return ts.ScriptTarget.ESNext;
            default:
                return ts.ScriptTarget.ES2020;
        }
    }
    /**
     * Parse module string to ModuleKind
     * @param module Module string
     * @returns ModuleKind
     */
    parseModule(module) {
        switch (module.toLowerCase()) {
            case 'none':
                return ts.ModuleKind.None;
            case 'commonjs':
                return ts.ModuleKind.CommonJS;
            case 'amd':
                return ts.ModuleKind.AMD;
            case 'umd':
                return ts.ModuleKind.UMD;
            case 'system':
                return ts.ModuleKind.System;
            case 'es2015':
                return ts.ModuleKind.ES2015;
            case 'es2020':
                return ts.ModuleKind.ES2020;
            case 'es2022':
                return ts.ModuleKind.ES2022;
            case 'esnext':
                return ts.ModuleKind.ESNext;
            case 'node16':
            case 'nodenext':
                return ts.ModuleKind.Node16;
            default:
                return ts.ModuleKind.CommonJS;
        }
    }
}
exports.CliProgramStrategy = CliProgramStrategy;
//# sourceMappingURL=cli-program-strategy.js.map