"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceFactory = void 0;
const file_finder_implementation_1 = require("../adapters/file-system/file-finder.implementation");
const process_executor_implementation_1 = require("../adapters/file-system/process-execution/process-executor.implementation");
const config_loader_implementation_1 = require("../config/config-loader.implementation");
const eslint_implementation_1 = require("../implementations/eslint/eslint.implementation");
const file_system_implementation_1 = require("../implementations/file-system/file-system.implementation");
const logger_implementation_1 = require("../implementations/logging/logger.implementation");
const prettier_implementation_1 = require("../implementations/prettier/prettier.implementation");
const typescript_compiler_implementation_1 = require("../implementations/typescript/typescript-compiler.implementation");
const file_discovery_pipeline_implementation_1 = require("../pipelines/file-discovery/implementations/file-discovery-pipeline.implementation");
const typescript_program_pipeline_1 = require("../pipelines/typescript-program/typescript-program-pipeline");
class ServiceFactory {
    static fileSystem;
    static prettier;
    static processExecutor;
    static logger;
    static configLoader;
    static fileFinder;
    static typescriptCompiler;
    static eslint;
    static getFileSystem() {
        if (!this.fileSystem) {
            this.fileSystem = new file_system_implementation_1.FileSystemImplementation();
        }
        return this.fileSystem;
    }
    static getPrettier() {
        if (!this.prettier) {
            this.prettier = new prettier_implementation_1.PrettierImplementation();
        }
        return this.prettier;
    }
    static getProcessExecutor() {
        if (!this.processExecutor) {
            this.processExecutor = new process_executor_implementation_1.ProcessExecutorImplementation();
        }
        return this.processExecutor;
    }
    static getLogger() {
        if (!this.logger) {
            this.logger = new logger_implementation_1.ConsoleLoggerImplementation();
        }
        return this.logger;
    }
    static getConfigLoader() {
        if (!this.configLoader) {
            this.configLoader = new config_loader_implementation_1.ConfigLoaderImplementation(this.getFileSystem());
        }
        return this.configLoader;
    }
    static getFileFinder() {
        if (!this.fileFinder) {
            this.fileFinder = new file_finder_implementation_1.FileFinderImplementation();
        }
        return this.fileFinder;
    }
    static getTypeScriptCompiler() {
        if (!this.typescriptCompiler) {
            this.typescriptCompiler = new typescript_compiler_implementation_1.TypeScriptCompilerImplementation(this.getProcessExecutor(), this.getLogger());
        }
        return this.typescriptCompiler;
    }
    static getESLint() {
        if (!this.eslint) {
            this.eslint = new eslint_implementation_1.ESLintImplementation(this.getProcessExecutor(), this.getLogger());
        }
        return this.eslint;
    }
    static getFileDiscoveryPipeline() {
        return new file_discovery_pipeline_implementation_1.FileDiscoveryPipelineImplementation();
    }
    static getTypeScriptProgramPipeline() {
        return new typescript_program_pipeline_1.TypeScriptProgramPipeline();
    }
    // Application service creation methods
    static createPostProcessingService() {
        const { PostProcessingService,
        // eslint-disable-next-line @typescript-eslint/no-require-imports
         } = require('../../application/services/post-processing/post-processing.service');
        return new PostProcessingService(this.getFileSystem(), this.getPrettier(), this.getProcessExecutor(), this.getLogger(), this.getESLint());
    }
    static createFileSystemService() {
        const { FileSystemService,
        // eslint-disable-next-line @typescript-eslint/no-require-imports
         } = require('../../application/services/file-system/file-system.service');
        return new FileSystemService(this.getFileSystem());
    }
    static createTypeGuardGeneratorService() {
        const { TypeGuardGeneratorService,
        // eslint-disable-next-line @typescript-eslint/no-require-imports
         } = require('../../application/services/type-guard/type-guard-generator.service');
        return new TypeGuardGeneratorService();
    }
    // For testing - allows injection of mocks
    static setFileSystem(fileSystem) {
        this.fileSystem = fileSystem;
    }
    static setPrettier(prettier) {
        this.prettier = prettier;
    }
    static setProcessExecutor(processExecutor) {
        this.processExecutor = processExecutor;
    }
    static setLogger(logger) {
        this.logger = logger;
    }
    static setConfigLoader(configLoader) {
        this.configLoader = configLoader;
    }
    static setFileFinder(fileFinder) {
        this.fileFinder = fileFinder;
    }
    static setTypeScriptCompiler(typescriptCompiler) {
        this.typescriptCompiler = typescriptCompiler;
    }
    static setESLint(eslint) {
        this.eslint = eslint;
    }
    // Reset all dependencies (useful for testing)
    static reset() {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.fileSystem = undefined;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.prettier = undefined;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.processExecutor = undefined;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.logger = undefined;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.configLoader = undefined;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.fileFinder = undefined;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.typescriptCompiler = undefined;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.eslint = undefined;
    }
}
exports.ServiceFactory = ServiceFactory;
//# sourceMappingURL=service-factory.js.map