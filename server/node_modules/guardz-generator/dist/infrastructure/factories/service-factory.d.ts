import type { IConfigLoader, IESLint, IFileFinder, IFileSystem, ILogger, IPrettier, IProcessExecutor, ITypeScriptCompiler } from '../../domain/interfaces';
import type { IFileDiscoveryPipeline } from '../pipelines/file-discovery/interfaces';
import type { IProgramCreationPipeline } from '../pipelines/typescript-program/interfaces';
export declare class ServiceFactory {
    private static fileSystem;
    private static prettier;
    private static processExecutor;
    private static logger;
    private static configLoader;
    private static fileFinder;
    private static typescriptCompiler;
    private static eslint;
    static getFileSystem(): IFileSystem;
    static getPrettier(): IPrettier;
    static getProcessExecutor(): IProcessExecutor;
    static getLogger(): ILogger;
    static getConfigLoader(): IConfigLoader;
    static getFileFinder(): IFileFinder;
    static getTypeScriptCompiler(): ITypeScriptCompiler;
    static getESLint(): IESLint;
    static getFileDiscoveryPipeline(): IFileDiscoveryPipeline;
    static getTypeScriptProgramPipeline(): IProgramCreationPipeline;
    static createPostProcessingService(): unknown;
    static createFileSystemService(): unknown;
    static createTypeGuardGeneratorService(): unknown;
    static setFileSystem(fileSystem: IFileSystem): void;
    static setPrettier(prettier: IPrettier): void;
    static setProcessExecutor(processExecutor: IProcessExecutor): void;
    static setLogger(logger: ILogger): void;
    static setConfigLoader(configLoader: IConfigLoader): void;
    static setFileFinder(fileFinder: IFileFinder): void;
    static setTypeScriptCompiler(typescriptCompiler: ITypeScriptCompiler): void;
    static setESLint(eslint: IESLint): void;
    static reset(): void;
}
//# sourceMappingURL=service-factory.d.ts.map