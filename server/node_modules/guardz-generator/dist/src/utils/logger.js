"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
class Logger {
    logFile;
    logStream = null;
    constructor() {
        this.logFile = path.join(process.cwd(), 'guardz-generator.log');
        this.initializeLogFile();
    }
    initializeLogFile() {
        try {
            // Create or clear the log file
            fs.writeFileSync(this.logFile, '');
            this.logStream = fs.createWriteStream(this.logFile, { flags: 'a' });
        }
        catch (error) {
            console.error('Failed to initialize log file:', error);
        }
    }
    formatMessage(level, message) {
        const timestamp = new Date().toISOString();
        return `[${timestamp}] [${level}] ${message}`;
    }
    writeToLog(message) {
        if (this.logStream) {
            this.logStream.write(message + '\n');
        }
    }
    info(message) {
        const formattedMessage = this.formatMessage('INFO', message);
        console.log(formattedMessage);
        this.writeToLog(formattedMessage);
    }
    warn(message) {
        const formattedMessage = this.formatMessage('WARN', message);
        console.warn(formattedMessage);
        this.writeToLog(formattedMessage);
    }
    error(message) {
        const formattedMessage = this.formatMessage('ERROR', message);
        console.error(formattedMessage);
        this.writeToLog(formattedMessage);
    }
    debug(message) {
        const formattedMessage = this.formatMessage('DEBUG', message);
        console.debug(formattedMessage);
        this.writeToLog(formattedMessage);
    }
    step(stepName, message) {
        const formattedMessage = this.formatMessage('STEP', `[${stepName}] ${message}`);
        console.log(formattedMessage);
        this.writeToLog(formattedMessage);
    }
    result(stepName, data) {
        const formattedMessage = this.formatMessage('RESULT', `[${stepName}] ${JSON.stringify(data, null, 2)}`);
        console.log(formattedMessage);
        this.writeToLog(formattedMessage);
    }
    close() {
        if (this.logStream) {
            this.logStream.end();
        }
    }
}
exports.logger = new Logger();
//# sourceMappingURL=logger.js.map