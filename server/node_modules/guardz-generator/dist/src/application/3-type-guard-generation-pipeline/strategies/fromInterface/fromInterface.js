"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromInterface = fromInterface;
const ts = __importStar(require("typescript"));
function fromInterface(context) {
    const { typeName, node } = context;
    if (!ts.isInterfaceDeclaration(node))
        return undefined;
    // Collect all needed guardz functions
    const neededFunctions = new Set();
    const properties = node.members
        .filter(ts.isPropertySignature)
        .map(member => {
        const name = member.name.getText();
        const { guard, functions } = generatePropertyGuard(member);
        functions.forEach(f => neededFunctions.add(f));
        return `  ${name}: ${guard},`;
    });
    // Generate imports
    const imports = [
        `import type { ${typeName} } from './_${typeName}';`,
        `import type { TypeGuardFn } from 'guardz';`,
        `import { isType${neededFunctions.size > 0 ? ', ' + Array.from(neededFunctions).join(', ') : ''} } from 'guardz';`,
    ];
    // Generate the type guard
    const guard = `export const is${typeName}: TypeGuardFn<${typeName}> = isType<${typeName}>({
${properties.join('\n')}
});`;
    return `${imports.join('\n')}\n\n${guard}`;
}
function generatePropertyGuard(member) {
    if (!member.type)
        return { guard: 'isUnknown', functions: [] };
    const isOptional = !!member.questionToken;
    const functions = [];
    switch (member.type.kind) {
        case ts.SyntaxKind.StringKeyword:
            functions.push('isString');
            return {
                guard: isOptional ? 'isUndefinedOr(isString)' : 'isString',
                functions
            };
        case ts.SyntaxKind.NumberKeyword:
            functions.push('isNumber');
            return {
                guard: isOptional ? 'isUndefinedOr(isNumber)' : 'isNumber',
                functions
            };
        case ts.SyntaxKind.BooleanKeyword:
            functions.push('isBoolean');
            return {
                guard: isOptional ? 'isUndefinedOr(isBoolean)' : 'isBoolean',
                functions
            };
        case ts.SyntaxKind.NullKeyword:
            functions.push('isNull');
            return { guard: 'isNull', functions };
        case ts.SyntaxKind.UndefinedKeyword:
            functions.push('isUndefined');
            return { guard: 'isUndefined', functions };
        case ts.SyntaxKind.AnyKeyword:
            functions.push('isUnknown');
            return { guard: 'isUnknown', functions };
        case ts.SyntaxKind.UnknownKeyword:
            functions.push('isUnknown');
            return { guard: 'isUnknown', functions };
        case ts.SyntaxKind.BigIntKeyword:
            functions.push('isBigInt');
            return {
                guard: isOptional ? 'isUndefinedOr(isBigInt)' : 'isBigInt',
                functions
            };
        case ts.SyntaxKind.SymbolKeyword:
            functions.push('isSymbol');
            return {
                guard: isOptional ? 'isUndefinedOr(isSymbol)' : 'isSymbol',
                functions
            };
        case ts.SyntaxKind.TypeReference:
            const typeName = member.type.typeName.getText();
            switch (typeName) {
                case 'Date':
                    functions.push('isDate');
                    return {
                        guard: isOptional ? 'isUndefinedOr(isDate)' : 'isDate',
                        functions
                    };
                case 'RegExp':
                    functions.push('isRegExp');
                    return {
                        guard: isOptional ? 'isUndefinedOr(isRegExp)' : 'isRegExp',
                        functions
                    };
                case 'Error':
                    functions.push('isError');
                    return {
                        guard: isOptional ? 'isUndefinedOr(isError)' : 'isError',
                        functions
                    };
                case 'Function':
                    functions.push('isFunction');
                    return {
                        guard: isOptional ? 'isUndefinedOr(isFunction)' : 'isFunction',
                        functions
                    };
                case 'Nullable':
                    functions.push('isNullOr');
                    return {
                        guard: 'isNullOr(isString)',
                        functions
                    };
                case 'Record':
                    functions.push('isObjectWithEachItem');
                    return {
                        guard: isOptional ? 'isUndefinedOr(isObjectWithEachItem(isUnknown))' : 'isObjectWithEachItem(isUnknown)',
                        functions
                    };
                default:
                    // For custom types, we'll need to import the guard
                    const guard = `is${typeName}`;
                    return {
                        guard: isOptional ? `isUndefinedOr(${guard})` : guard,
                        functions: []
                    };
            }
        default:
            functions.push('isUnknown');
            return {
                guard: isOptional ? 'isUndefinedOr(isUnknown)' : 'isUnknown',
                functions
            };
    }
}
//# sourceMappingURL=fromInterface.js.map