"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromGenericTypeAlias = fromGenericTypeAlias;
const ts = __importStar(require("typescript"));
function fromGenericTypeAlias(context) {
    const { typeName, node } = context;
    if (!ts.isTypeAliasDeclaration(node))
        return undefined;
    // Check if type alias is generic (has type parameters)
    if (!node.typeParameters || node.typeParameters.length === 0) {
        return undefined; // Not generic, let other strategies handle it
    }
    const typeParams = node.typeParameters.map(param => param.name.text);
    const type = node.type;
    // Handle different type structures
    let check = '';
    if (ts.isTypeLiteralNode(type)) {
        // Handle object type literals
        const properties = type.members
            .filter(ts.isPropertySignature)
            .map(member => {
            const name = member.name.getText();
            let propCheck = `typeof obj.${name} !== 'undefined'`;
            if (member.type) {
                if (member.type.kind === ts.SyntaxKind.StringKeyword) {
                    propCheck = `typeof obj.${name} === 'string'`;
                }
                else if (member.type.kind === ts.SyntaxKind.NumberKeyword) {
                    propCheck = `typeof obj.${name} === 'number'`;
                }
                else if (member.type.kind === ts.SyntaxKind.BooleanKeyword) {
                    propCheck = `typeof obj.${name} === 'boolean'`;
                }
                else if (ts.isTypeReferenceNode(member.type)) {
                    // Handle type references (including generic type parameters)
                    const refTypeName = member.type.typeName.getText();
                    if (typeParams.includes(refTypeName)) {
                        // This is a generic type parameter, use the provided type guard
                        propCheck = `is${refTypeName}(obj.${name})`;
                    }
                    else {
                        // This is a concrete type reference, use its type guard
                        propCheck = `is${refTypeName}(obj.${name})`;
                    }
                }
            }
            return propCheck;
        });
        check = `typeof obj === 'object' && obj !== null && ${properties.join(' && ')}`;
    }
    else if (ts.isTypeReferenceNode(type)) {
        // Handle type references
        const refTypeName = type.typeName.getText();
        if (typeParams.includes(refTypeName)) {
            // This is a generic type parameter, use the provided type guard
            check = `is${refTypeName}(obj)`;
        }
        else {
            // This is a concrete type reference, use its type guard
            check = `is${refTypeName}(obj)`;
        }
    }
    else {
        return undefined; // Unsupported type structure
    }
    // Generate type guard function with generic parameters
    const genericParams = typeParams
        .map(param => `is${param}: (x: any) => x is ${param}`)
        .join(', ');
    const guard = `export function is${typeName}<${typeParams.join(', ')}>(
  obj: any,
  ${genericParams}
): obj is ${typeName}<${typeParams.join(', ')}> {
  return ${check};
}`;
    return guard;
}
//# sourceMappingURL=fromGenericTypeAlias.js.map