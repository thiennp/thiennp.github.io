"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromConfigFile = fromConfigFile;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const glob = __importStar(require("glob"));
async function fromConfigFile() {
    try {
        const configPath = path.join(process.cwd(), 'guardz.config.ts');
        if (!fs.existsSync(configPath)) {
            return [];
        }
        // For now, we'll use a simple approach to read the config
        // In a real implementation, you might want to use a proper config parser
        const configContent = fs.readFileSync(configPath, 'utf-8');
        // Look for patterns in the config file
        const patterns = extractPatternsFromConfig(configContent);
        if (!patterns || patterns.length === 0) {
            return [];
        }
        const allFiles = [];
        for (const pattern of patterns) {
            try {
                const files = await glob.glob(pattern, {
                    absolute: true,
                });
                allFiles.push(...files);
            }
            catch (error) {
                console.warn(`Failed to expand config pattern "${pattern}":`, error);
            }
        }
        return allFiles;
    }
    catch (error) {
        console.warn('Failed to read config file:', error);
        return [];
    }
}
function extractPatternsFromConfig(configContent) {
    const patterns = [];
    // Simple regex to find patterns like "src/_test/**/*.ts"
    const patternRegex = /['"`]([^'"`]*\*\*\/\*\.ts?)['"`]/g;
    let match;
    while ((match = patternRegex.exec(configContent)) !== null) {
        patterns.push(match[1]);
    }
    return patterns;
}
//# sourceMappingURL=fromConfigFile.js.map