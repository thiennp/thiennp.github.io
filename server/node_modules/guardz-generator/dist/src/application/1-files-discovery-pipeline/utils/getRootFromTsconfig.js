"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRootFromTsconfig = getRootFromTsconfig;
const fs = __importStar(require("fs/promises"));
const path = __importStar(require("path"));
/**
 * Reads tsconfig.json and returns the root directory for source files.
 * Prefers 'rootDir', then 'baseUrl', then defaults to 'src'.
 * @param tsconfigPath - Optional path to tsconfig.json (defaults to project root)
 * @returns Promise of the root directory string (relative to project root)
 */
async function getRootFromTsconfig(tsconfigPath) {
    const configPath = tsconfigPath
        ? path.resolve(process.cwd(), tsconfigPath)
        : path.resolve(process.cwd(), 'tsconfig.json');
    try {
        const content = await fs.readFile(configPath, 'utf-8');
        const json = JSON.parse(content);
        const compilerOptions = json.compilerOptions || {};
        if (compilerOptions.rootDir) {
            return compilerOptions.rootDir.replace(/^\.\//, '');
        }
        if (compilerOptions.baseUrl) {
            return compilerOptions.baseUrl.replace(/^\.\//, '');
        }
        return 'src';
    }
    catch {
        return 'src';
    }
}
//# sourceMappingURL=getRootFromTsconfig.js.map