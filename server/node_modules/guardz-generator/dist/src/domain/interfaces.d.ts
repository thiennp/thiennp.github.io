export interface IFileSystem {
    readFile(filePath: string): Promise<string>;
    writeFile(filePath: string, content: string): Promise<void>;
    writeFilesToSameDirectory(files: Array<{
        fileName: string;
        content: string;
    }>): Promise<void>;
    writeFilesToDirectory(files: Array<{
        fileName: string;
        content: string;
    }>, baseOutputDir: string): Promise<void>;
    fileExists(filePath: string): Promise<boolean>;
    mkdir(path: string, options?: {
        recursive?: boolean;
    }): Promise<void>;
}
export interface IPrettier {
    format(content: string, options: any): Promise<string>;
    resolveConfig(filePath: string): Promise<any>;
}
export interface IProcessExecutor {
    execute(command: string): Promise<{
        stdout: string;
        stderr: string;
    }>;
}
export interface ILogger {
    log(message: string): void;
    warn(message: string, error?: unknown): void;
    error(message: string, error?: unknown): void;
}
export interface IConfigLoader {
    loadConfig(configPath: string): Promise<any>;
}
export interface IFileFinder {
    findFiles(pattern: string): Promise<string[]>;
    findFiles(patterns: string[]): Promise<string[]>;
}
export interface ITypeScriptCompiler {
    checkFile(filePath: string): Promise<void>;
    checkFiles(filePaths: string[]): Promise<void>;
}
export interface IESLint {
    fixFile(filePath: string): Promise<void>;
    fixFiles(filePaths: string[]): Promise<void>;
}
//# sourceMappingURL=interfaces.d.ts.map