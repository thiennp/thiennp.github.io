"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeGuardGenerator = void 0;
const path = __importStar(require("path"));
const ts = __importStar(require("typescript"));
const imports_1 = require("../../../shared/utils/imports");
const logging_1 = require("../../../shared/utils/logging");
const types_1 = require("../../../shared/utils/types");
const file_1 = require("../file");
const interface_1 = require("./interface");
const type_alias_1 = require("./type-alias");
class TypeGuardGenerator {
    program;
    checker;
    sourceFiles;
    allInterfaces;
    importMap;
    sharedContext;
    constructor(sourceFiles, program) {
        this.program = program;
        this.checker = this.program.getTypeChecker();
        (0, logging_1.logSection)('TypeGuardGenerator Initialization');
        (0, logging_1.logDebug)('TypeGuardGenerator constructor called', {
            sourceFilesCount: sourceFiles.length,
        });
        // Only include the specified source files, not all files in the program
        this.sourceFiles = sourceFiles
            .map(filePath => this.program.getSourceFile(filePath))
            .filter((sf) => sf !== undefined &&
            !sf.isDeclarationFile &&
            !sf.fileName.includes('.guardz.ts'));
        (0, logging_1.logDebug)('Filtered source files', {
            originalCount: sourceFiles.length,
            filteredCount: this.sourceFiles.length,
        });
        // Collect all interfaces from only the specified source files
        this.allInterfaces = this.collectAllInterfaces();
        (0, logging_1.logDebug)('Collected interfaces', {
            interfaceCount: this.allInterfaces.length,
        });
        // Build import map from only the specified source files
        this.importMap = (0, imports_1.buildImportMap)(this.sourceFiles);
        (0, logging_1.logDebug)('Built import map', { importMapSize: this.importMap.size });
        // Clear the import strategy cache at the start of each generation run
        (0, imports_1.clearImportStrategyCache)();
        (0, logging_1.logDebug)('Cleared import strategy cache');
        // Create shared context for optimization
        this.sharedContext = {
            sourceFiles: this.sourceFiles,
            outputDir: '', // Will be set per file
            importMap: this.importMap,
        };
        (0, logging_1.logDebug)('Created shared context for optimization');
        (0, logging_1.logEmptyLines)();
    }
    generateAllTypeGuards(options = {}) {
        (0, logging_1.logSection)('Type Guard Generation Started');
        (0, logging_1.logDebug)('generateAllTypeGuards called', { options });
        const { interfaces, typeAliases } = (0, file_1.collectAllDeclarations)(this.sourceFiles);
        (0, logging_1.logDebug)('Collected declarations', {
            interfaceCount: interfaces.length,
            typeAliasCount: typeAliases.length,
        });
        // Update shared context with current options
        const totalFiles = interfaces.length + typeAliases.length;
        (0, logging_1.logSection)('Generation Complete');
        (0, logging_1.logDebug)('Generated all type guards', {
            interfaceFiles: interfaces.length,
            typeAliasFiles: typeAliases.length,
            totalFiles,
        });
        (0, logging_1.logEmptyLines)();
        return interfaces
            .map(interfaceDecl => {
            const guardName = options.guardName || `is${interfaceDecl.name.text}`;
            const outputDir = path.dirname(interfaceDecl.getSourceFile().fileName);
            this.sharedContext.outputDir = outputDir;
            return (0, file_1.generateInterfaceFile)(interfaceDecl, guardName, outputDir, this.sourceFiles, this.allInterfaces, this.importMap);
        })
            .concat(typeAliases.map(typeAliasDecl => {
            const guardName = options.guardName || `is${typeAliasDecl.name.text}`;
            const outputDir = path.dirname(typeAliasDecl.getSourceFile().fileName);
            this.sharedContext.outputDir = outputDir;
            return (0, file_1.generateTypeAliasFile)(typeAliasDecl, guardName, outputDir, this.sourceFiles, this.importMap);
        }));
    }
    generateTypeGuard(typeName, options = {}) {
        // First try to find as interface
        const interfaceFound = (0, types_1.findInterfaceWithSourceFile)(typeName, this.sourceFiles);
        if (interfaceFound) {
            const [targetInterface] = interfaceFound;
            const guardName = options.guardName || `is${typeName}`;
            const hasGenerics = targetInterface.typeParameters &&
                targetInterface.typeParameters.length > 0;
            const typeGuardCode = hasGenerics
                ? (0, interface_1.generateGenericInterfaceTypeGuard)(targetInterface, guardName, this.allInterfaces, this.sourceFiles, this.importMap)
                : (0, interface_1.generateInterfaceTypeGuard)(targetInterface, guardName, this.allInterfaces, this.sourceFiles, this.importMap);
            const importTypes = (0, imports_1.collectReferencedTypes)(targetInterface);
            if (!importTypes.includes(typeName)) {
                importTypes.push(typeName);
            }
            const outputDir = path.dirname(targetInterface.getSourceFile().fileName);
            const fileName = `${guardName}.guardz.ts`;
            // Update shared context with current output directory
            this.sharedContext.outputDir = outputDir;
            return (0, file_1.generateCompleteFile)(guardName, typeGuardCode, typeName, importTypes, fileName, outputDir, this.sourceFiles, hasGenerics, this.importMap, targetInterface.getSourceFile());
        }
        // Then try to find as type alias
        const typeAliasFound = (0, types_1.findTypeAliasWithSourceFile)(typeName, this.sourceFiles);
        if (typeAliasFound) {
            const [targetTypeAlias] = typeAliasFound;
            const guardName = options.guardName || `is${typeName}`;
            const typeGuardCode = (0, type_alias_1.generateTypeAliasTypeGuard)(targetTypeAlias, guardName, this.sourceFiles, this.importMap);
            const importTypes = (0, imports_1.collectReferencedTypesFromTypeAlias)(targetTypeAlias, this.sourceFiles);
            const outputDir = path.dirname(targetTypeAlias.getSourceFile().fileName);
            const fileName = `${guardName}.guardz.ts`;
            // Update shared context with current output directory
            this.sharedContext.outputDir = outputDir;
            return (0, file_1.generateCompleteFile)(guardName, typeGuardCode, typeName, importTypes, fileName, outputDir, this.sourceFiles, undefined, this.importMap, targetTypeAlias.getSourceFile());
        }
        throw new Error(`Type '${typeName}' not found in the provided source files.`);
    }
    async writeTypeGuardsToSameDirectory(generatedFiles) {
        for (const file of generatedFiles) {
            const fs = (await Promise.resolve().then(() => __importStar(require('fs')))).promises;
            const pathModule = await Promise.resolve().then(() => __importStar(require('path')));
            // Use the fileName as-is since it already includes the full path
            const outPath = pathModule.resolve(file.fileName);
            const dir = pathModule.dirname(outPath);
            await fs.mkdir(dir, { recursive: true });
            // Write the file without any post-processing - that will be handled separately
            await fs.writeFile(outPath, file.content, 'utf8');
        }
    }
    async runPostProcessing(generatedFiles) {
        const filePaths = generatedFiles.map(file => file.fileName);
        if (filePaths.length === 0) {
            return;
        }
        (0, logging_1.log)('Running post-processing on generated files...');
        // Run prettier
        await this.runPrettier(filePaths);
        // Run ESLint --fix
        await this.runESLintFix(filePaths);
        // Run TypeScript compiler check
        await this.runTypeScriptCheck(filePaths);
    }
    collectAllInterfaces() {
        const interfaces = new Set();
        const processedFiles = new Set();
        const collectFromFile = (sourceFile) => {
            if (processedFiles.has(sourceFile.fileName)) {
                return;
            }
            processedFiles.add(sourceFile.fileName);
            // Collect interfaces from this file
            const visit = (node) => {
                if (ts.isInterfaceDeclaration(node)) {
                    interfaces.add(node);
                }
                ts.forEachChild(node, visit);
            };
            visit(sourceFile);
            // Follow imports to collect interfaces from imported files
            sourceFile.statements.forEach(statement => {
                if (ts.isImportDeclaration(statement) && statement.moduleSpecifier) {
                    const moduleSpecifier = statement.moduleSpecifier
                        .getText()
                        .slice(1, -1); // Remove quotes
                    if (!moduleSpecifier.startsWith('.')) {
                        return; // Skip non-relative imports
                    }
                    const resolvedModule = this.program.getSourceFile(path.resolve(path.dirname(sourceFile.fileName), moduleSpecifier + '.ts'));
                    if (resolvedModule) {
                        collectFromFile(resolvedModule);
                    }
                }
            });
        };
        // Start collection from initial source files
        this.sourceFiles.forEach(sourceFile => collectFromFile(sourceFile));
        return Array.from(interfaces);
    }
    async runPrettier(filePaths) {
        try {
            const { spawn } = await Promise.resolve().then(() => __importStar(require('child_process')));
            const prettierArgs = ['prettier', '--write'];
            prettierArgs.push(...filePaths);
            const prettierProcess = spawn('npx', prettierArgs, {
                stdio: ['pipe', 'pipe', 'pipe'],
                cwd: process.cwd(),
            });
            let errorOutput = '';
            prettierProcess.stderr?.on('data', data => {
                errorOutput += data.toString();
            });
            await new Promise(resolve => {
                prettierProcess.on('close', code => {
                    if (code === 0) {
                        (0, logging_1.log)('✓ Prettier formatting applied to generated files');
                    }
                    else {
                        (0, logging_1.log)(`⚠ Prettier formatting completed with code ${code}`);
                        if (errorOutput) {
                            (0, logging_1.log)('Prettier stderr:', errorOutput);
                        }
                    }
                    resolve();
                });
                prettierProcess.on('error', error => {
                    (0, logging_1.log)('⚠ Prettier formatting failed:', error.message);
                    resolve(); // Don't fail the entire process
                });
            });
        }
        catch (error) {
            (0, logging_1.log)('⚠ Prettier formatting failed:', error.message);
        }
    }
    async runTypeScriptCheck(filePaths) {
        try {
            const { spawn } = await Promise.resolve().then(() => __importStar(require('child_process')));
            const tscProcess = spawn('npx', ['tsc', '--noEmit', ...filePaths], {
                stdio: ['pipe', 'pipe', 'pipe'],
                cwd: process.cwd(),
            });
            let errorOutput = '';
            tscProcess.stderr?.on('data', data => {
                errorOutput += data.toString();
            });
            await new Promise(resolve => {
                tscProcess.on('close', code => {
                    if (code === 0) {
                        (0, logging_1.log)('✓ TypeScript type checking passed for generated files');
                    }
                    else {
                        (0, logging_1.logWarning)(`⚠ TypeScript type checking completed with code ${code}`);
                        if (errorOutput) {
                            (0, logging_1.log)('TypeScript stderr:', errorOutput);
                        }
                    }
                    resolve();
                });
                tscProcess.on('error', error => {
                    (0, logging_1.log)('⚠ TypeScript type checking failed:', error.message);
                    resolve(); // Don't fail the entire process
                });
            });
        }
        catch (error) {
            (0, logging_1.log)('⚠ TypeScript type checking failed:', error.message);
        }
    }
    async runESLintFix(filePaths) {
        // Run ESLint --fix on all generated files
        if (filePaths.length > 0) {
            try {
                const { spawn } = await Promise.resolve().then(() => __importStar(require('child_process')));
                const eslintProcess = spawn('npx', ['eslint', '--fix', ...filePaths], {
                    stdio: ['pipe', 'pipe', 'pipe'],
                    cwd: process.cwd(),
                });
                let errorOutput = '';
                eslintProcess.stderr?.on('data', data => {
                    errorOutput += data.toString();
                });
                await new Promise(resolve => {
                    eslintProcess.on('close', code => {
                        if (code === 0) {
                            (0, logging_1.log)('✓ ESLint --fix applied to generated files');
                        }
                        else {
                            // ESLint --fix can return non-zero even on success if there are unfixable issues
                            // We'll treat this as a warning rather than an error
                            (0, logging_1.logWarning)(`⚠ ESLint --fix completed with code ${code}`);
                            if (errorOutput) {
                                (0, logging_1.log)('ESLint stderr:', errorOutput);
                            }
                        }
                        resolve();
                    });
                    eslintProcess.on('error', error => {
                        (0, logging_1.log)('⚠ ESLint --fix failed:', error.message);
                        resolve(); // Don't fail the entire process
                    });
                });
            }
            catch (error) {
                (0, logging_1.log)('⚠ ESLint --fix failed:', error.message);
            }
        }
    }
}
exports.TypeGuardGenerator = TypeGuardGenerator;
//# sourceMappingURL=type-guard-generator.js.map