"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateTypeAliasTypeGuard = void 0;
const ts = __importStar(require("typescript"));
const ast_1 = require("../../../../shared/utils/ast");
const convert_type_to_guard_1 = require("../handlers/convert-type-to-guard");
const generateTypeAliasTypeGuard = (typeAliasDecl, guardName, sourceFiles, importMap) => {
    const typeParameters = (0, ast_1.extractTypeParameters)(typeAliasDecl);
    const context = {
        sourceFiles,
        importMap,
        currentSourceFile: typeAliasDecl.getSourceFile(),
        currentTypeName: typeAliasDecl.name.text,
    };
    if (typeParameters.length === 0) {
        // Non-generic type alias
        if (ts.isTypeLiteralNode(typeAliasDecl.type)) {
            const properties = (0, ast_1.extractPropertiesFromTypeLiteral)(typeAliasDecl.type);
            const propertyGuards = properties
                .map(prop => {
                const typeGuard = (0, convert_type_to_guard_1.convertTypeToGuard)(prop.type, context);
                if (prop.isOptional) {
                    return `${prop.name}: isUndefinedOr(${typeGuard})`;
                }
                else {
                    return `${prop.name}: ${typeGuard}`;
                }
            })
                .join(', ');
            return `export const ${guardName} = isType<${typeAliasDecl.name.text}>({ ${propertyGuards} });`;
        }
        else {
            // Simple type alias like: type MyString = string
            const typeGuard = (0, convert_type_to_guard_1.convertTypeToGuard)(typeAliasDecl.type, context);
            // Check if the type guard uses isIntersectionOf and add type annotation
            return `export const ${guardName}: TypeGuardFn<${typeAliasDecl.name.text}> = ${typeGuard};`;
        }
    }
    // Generic type alias
    const typeParameterNames = typeParameters.map(tp => tp.name);
    const formattedTypeParameters = typeParameters.map(tp => (0, ast_1.formatTypeParameter)(tp));
    const typeGuardParams = typeParameters.map(tp => `typeGuard${tp.name}: TypeGuardFn<${tp.name}>`);
    const genericTypeString = `${typeAliasDecl.name.text}<${typeParameterNames.join(', ')}>`;
    if (ts.isTypeLiteralNode(typeAliasDecl.type)) {
        const properties = (0, ast_1.extractPropertiesFromTypeLiteral)(typeAliasDecl.type);
        const propertyGuards = properties
            .map(prop => {
            const genericContext = {
                typeParameterNames,
                isGeneric: true,
                sourceFiles,
                importMap,
                currentSourceFile: typeAliasDecl.getSourceFile(),
                currentTypeName: typeAliasDecl.name.text,
            };
            const typeGuard = (0, convert_type_to_guard_1.convertTypeToGuard)(prop.type, genericContext);
            if (prop.isOptional) {
                return `${prop.name}: isUndefinedOr(${typeGuard})`;
            }
            else {
                return `${prop.name}: ${typeGuard}`;
            }
        })
            .join(', ');
        return `export const ${guardName} = <${formattedTypeParameters.join(', ')}>(${typeGuardParams.join(', ')}): TypeGuardFn<${genericTypeString}> => isType<${genericTypeString}>({ ${propertyGuards} });`;
    }
    else {
        // Simple generic type alias
        const genericContext = {
            typeParameterNames,
            isGeneric: true,
            sourceFiles,
            importMap,
            currentSourceFile: typeAliasDecl.getSourceFile(),
            currentTypeName: typeAliasDecl.name.text,
        };
        const typeGuard = (0, convert_type_to_guard_1.convertTypeToGuard)(typeAliasDecl.type, genericContext);
        return `export const ${guardName} = <${formattedTypeParameters.join(', ')}>(${typeGuardParams.join(', ')}): TypeGuardFn<${genericTypeString}> => ${typeGuard};`;
    }
};
exports.generateTypeAliasTypeGuard = generateTypeAliasTypeGuard;
//# sourceMappingURL=generate-type-alias-type-guard.js.map