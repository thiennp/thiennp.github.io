"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleIndexedAccessType = void 0;
const ts = __importStar(require("typescript"));
const convert_type_to_guard_1 = require("./convert-type-to-guard");
const handleIndexedAccessType = (typeNode, context) => {
    if (!ts.isIndexedAccessTypeNode(typeNode)) {
        throw new Error('Expected IndexedAccessTypeNode');
    }
    // For indexed access types like Config['app']['environment'], we need to resolve them
    // to their actual type. Since we can't easily resolve complex indexed access types
    // without a full type checker, we'll try to handle common patterns.
    const objectType = typeNode.objectType;
    const indexType = typeNode.indexType;
    // If the index type is a string literal, we can try to resolve it
    if (ts.isLiteralTypeNode(indexType) &&
        ts.isStringLiteral(indexType.literal)) {
        const propertyName = indexType.literal.text;
        // If the object type is a type reference (like Config), we can try to find the property
        if (ts.isTypeReferenceNode(objectType)) {
            const typeName = objectType.typeName.getText();
            // Look for the type definition in source files
            if (context.sourceFiles) {
                for (const sourceFile of context.sourceFiles) {
                    ts.forEachChild(sourceFile, node => {
                        if (ts.isInterfaceDeclaration(node) &&
                            node.name.text === typeName) {
                            // Find the property in the interface
                            node.members.forEach(member => {
                                if (ts.isPropertySignature(member) &&
                                    member.name &&
                                    ts.isIdentifier(member.name) &&
                                    member.name.text === propertyName &&
                                    member.type) {
                                    // Found the property, convert its type to a guard
                                    return (0, convert_type_to_guard_1.convertTypeToGuard)(member.type, context);
                                }
                            });
                        }
                    });
                }
            }
        }
    }
    // For complex nested indexed access types like Config['app']['environment'],
    // we need to recursively resolve them. Let's try a different approach.
    // Check if this is a common pattern we can handle
    const typeText = typeNode.getText();
    // Handle common environment patterns
    if (typeText.includes("'environment'") || typeText.includes('environment')) {
        // This is likely an environment type, check if it resolves to a union of string literals
        if (typeText.includes("'development'") ||
            typeText.includes("'staging'") ||
            typeText.includes("'production'")) {
            return "isOneOf<'development' | 'staging' | 'production'>('development', 'staging', 'production')";
        }
    }
    // Handle common log level patterns
    if (typeText.includes("'level'") || typeText.includes('level')) {
        if (typeText.includes("'error'") ||
            typeText.includes("'warn'") ||
            typeText.includes("'info'") ||
            typeText.includes("'debug'")) {
            return "isOneOf<'error' | 'warn' | 'info' | 'debug'>('error', 'warn', 'info', 'debug')";
        }
    }
    // Handle common format patterns
    if (typeText.includes("'format'") || typeText.includes('format')) {
        if (typeText.includes("'json'") || typeText.includes("'simple'")) {
            return "isOneOf<'json' | 'simple'>('json', 'simple')";
        }
    }
    // Handle common destination patterns
    if (typeText.includes("'destination'") || typeText.includes('destination')) {
        if (typeText.includes("'console'") ||
            typeText.includes("'file'") ||
            typeText.includes("'both'")) {
            return "isOneOf<'console' | 'file' | 'both'>('console', 'file', 'both')";
        }
    }
    // For nested indexed access types like Config['app']['environment'],
    // try to resolve them by looking at the type text pattern
    if (typeText.includes("Config['app']['environment']")) {
        return "isOneOf<'development' | 'staging' | 'production'>('development', 'staging', 'production')";
    }
    if (typeText.includes("ConfigType['app']['environment']")) {
        return "isOneOf<'development' | 'staging' | 'production'>('development', 'staging', 'production')";
    }
    if (typeText.includes("Config['logging']['level']")) {
        return "isOneOf<'error' | 'warn' | 'info' | 'debug'>('error', 'warn', 'info', 'debug')";
    }
    if (typeText.includes("Config['logging']['format']")) {
        return "isOneOf<'json' | 'simple'>('json', 'simple')";
    }
    if (typeText.includes("Config['logging']['destination']")) {
        return "isOneOf<'console' | 'file' | 'both'>('console', 'file', 'both')";
    }
    // For now, fall back to isUnknown for complex indexed access types
    // In a full implementation, we would need a type checker to resolve these properly
    return 'isUnknown';
};
exports.handleIndexedAccessType = handleIndexedAccessType;
//# sourceMappingURL=handle-indexed-access-type.js.map