"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleIntersectionType = void 0;
const ts = __importStar(require("typescript"));
const convert_type_to_guard_1 = require("./convert-type-to-guard");
const handleIntersectionType = (typeNode, context) => {
    if (!ts.isIntersectionTypeNode(typeNode)) {
        throw new Error('Expected IntersectionTypeNode');
    }
    // Check if this is a branded type (intersection with unique symbol)
    const hasUniqueSymbol = typeNode.types.some(type => {
        if (ts.isTypeLiteralNode(type)) {
            return type.members.some(member => {
                if (ts.isPropertySignature(member) && member.type) {
                    return member.type.getText().includes('unique symbol');
                }
                return false;
            });
        }
        return type.getText().includes('unique symbol');
    });
    if (hasUniqueSymbol) {
        // For branded types, use isBranded with the base type
        const brandedTypeText = typeNode.getText();
        // Extract the base type from the intersection
        const baseTypes = typeNode.types.filter(type => {
            if (ts.isTypeLiteralNode(type)) {
                return type.members.some(member => {
                    if (ts.isPropertySignature(member) && member.type) {
                        return member.type.getText().includes('unique symbol');
                    }
                    return false;
                });
            }
            return !type.getText().includes('unique symbol');
        });
        if (baseTypes.length > 0) {
            const baseTypeGuard = (0, convert_type_to_guard_1.convertTypeToGuard)(baseTypes[0], context);
            // Try to get the type name from context if available
            let typeName = brandedTypeText;
            if (context.currentTypeName) {
                typeName = context.currentTypeName;
            }
            return `isBranded<${typeName}>(${baseTypeGuard})`;
        }
        // Fallback to isAsserted if we can't determine the base type
        return `isAsserted<${brandedTypeText}>`;
    }
    const typeGuards = typeNode.types.map(type => (0, convert_type_to_guard_1.convertTypeToGuard)(type, context));
    // For intersection types, we need to combine the type guards
    if (typeGuards.length === 0) {
        return 'isUnknown';
    }
    if (typeGuards.length === 1) {
        return typeGuards[0];
    }
    // For multiple types, use isIntersectionOf with the new guardz 1.7.0 API
    // The new API takes the type guards as direct arguments, not in an array
    return `isIntersectionOf(${typeGuards.join(', ')})`;
};
exports.handleIntersectionType = handleIntersectionType;
//# sourceMappingURL=handle-intersection-type.js.map