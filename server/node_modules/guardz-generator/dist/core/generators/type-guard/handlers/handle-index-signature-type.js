"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleIndexSignatureType = void 0;
const ts = __importStar(require("typescript"));
const convert_type_to_guard_1 = require("./convert-type-to-guard");
// Import the type literal handler for fallback
const handle_type_literal_1 = require("./handle-type-literal");
/**
 * Handles index signature types in interfaces
 *
 * Index signatures allow objects to have dynamic keys with a specific value type
 * Example: { [key: string]: number }
 *
 * Uses the new isIndexSignature type guard from guardz 1.11.6
 */
const handleIndexSignatureType = (typeNode, context = {}) => {
    // Check if this type literal has index signatures
    const indexSignatures = typeNode.members.filter((member) => ts.isIndexSignatureDeclaration(member));
    if (indexSignatures.length === 0) {
        // If no index signatures, fall back to type literal handling
        return (0, handle_type_literal_1.handleTypeLiteral)(typeNode, context);
    }
    // Check if there are also regular properties (not just index signatures)
    const regularProperties = typeNode.members.filter((member) => ts.isPropertySignature(member));
    // If there are both index signatures and regular properties, create an intersection
    if (indexSignatures.length > 0 && regularProperties.length > 0) {
        // Handle the index signature part
        const indexSignature = indexSignatures[0];
        const keyParameter = indexSignature.parameters[0];
        const valueType = indexSignature.type;
        if (!keyParameter?.type || !valueType) {
            return 'isObject'; // Fallback
        }
        const keyGuard = (0, convert_type_to_guard_1.convertTypeToGuard)(keyParameter.type, context);
        const valueGuard = (0, convert_type_to_guard_1.convertTypeToGuard)(valueType, context);
        const indexSignatureGuard = `isIndexSignature(${keyGuard}, ${valueGuard})`;
        // Handle the regular properties part
        const regularPropertiesGuard = (0, handle_type_literal_1.handleTypeLiteral)(typeNode, context);
        // Create intersection of both parts
        return `isIntersectionOf(${indexSignatureGuard}, ${regularPropertiesGuard})`;
    }
    // If only index signatures, handle as before
    const indexSignature = indexSignatures[0];
    // Get the key type
    const keyParameter = indexSignature.parameters[0];
    if (!keyParameter || !keyParameter.type) {
        return 'isObject'; // Fallback
    }
    // Get the value type
    const valueType = indexSignature.type;
    if (!valueType) {
        return 'isObject'; // Fallback
    }
    // Convert key and value types to guards
    const keyGuard = (0, convert_type_to_guard_1.convertTypeToGuard)(keyParameter.type, context);
    const valueGuard = (0, convert_type_to_guard_1.convertTypeToGuard)(valueType, context);
    return `isIndexSignature(${keyGuard}, ${valueGuard})`;
};
exports.handleIndexSignatureType = handleIndexSignatureType;
//# sourceMappingURL=handle-index-signature-type.js.map