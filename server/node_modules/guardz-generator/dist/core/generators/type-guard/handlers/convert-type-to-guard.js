"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertTypeToGuard = void 0;
const ts = __importStar(require("typescript"));
const handle_array_type_1 = require("./handle-array-type");
const handle_function_type_1 = require("./handle-function-type");
const handle_index_signature_type_1 = require("./handle-index-signature-type");
const handle_indexed_access_type_1 = require("./handle-indexed-access-type");
const handle_intersection_type_1 = require("./handle-intersection-type");
const handle_literal_type_1 = require("./handle-literal-type");
const handle_primitive_type_1 = require("./handle-primitive-type");
const handle_tuple_type_1 = require("./handle-tuple-type");
const handle_type_literal_1 = require("./handle-type-literal");
const handle_type_operator_1 = require("./handle-type-operator");
const handle_type_reference_1 = require("./handle-type-reference");
const handle_union_type_1 = require("./handle-union-type");
const convertTypeToGuard = (typeNode, context = {}) => {
    if (ts.isParenthesizedTypeNode(typeNode)) {
        return (0, exports.convertTypeToGuard)(typeNode.type, context);
    }
    else if (ts.isUnionTypeNode(typeNode)) {
        return (0, handle_union_type_1.handleUnionType)(typeNode, context);
    }
    else if (ts.isIntersectionTypeNode(typeNode)) {
        return (0, handle_intersection_type_1.handleIntersectionType)(typeNode, context);
    }
    else if (ts.isTypeReferenceNode(typeNode)) {
        return (0, handle_type_reference_1.handleTypeReference)(typeNode, context);
    }
    else if (ts.isTypeLiteralNode(typeNode)) {
        // Check if this type literal has index signatures
        const hasIndexSignatures = typeNode.members.some(member => ts.isIndexSignatureDeclaration(member));
        if (hasIndexSignatures) {
            return (0, handle_index_signature_type_1.handleIndexSignatureType)(typeNode, context);
        }
        else {
            return (0, handle_type_literal_1.handleTypeLiteral)(typeNode, context);
        }
    }
    else if (ts.isTypeOperatorNode(typeNode)) {
        return (0, handle_type_operator_1.handleTypeOperator)(typeNode, context);
    }
    else if (ts.isArrayTypeNode(typeNode)) {
        return (0, handle_array_type_1.handleArrayType)(typeNode, context);
    }
    else if (ts.isTupleTypeNode(typeNode)) {
        return (0, handle_tuple_type_1.handleTupleType)(typeNode, context);
    }
    else if (ts.isLiteralTypeNode(typeNode)) {
        return (0, handle_literal_type_1.handleLiteralType)(typeNode, context);
    }
    else if (ts.isIndexedAccessTypeNode(typeNode)) {
        return (0, handle_indexed_access_type_1.handleIndexedAccessType)(typeNode, context);
    }
    else if (typeNode.kind === 184) {
        // Function type nodes (kind 184)
        return (0, handle_function_type_1.handleFunctionType)(typeNode, context);
    }
    else {
        return (0, handle_primitive_type_1.handlePrimitiveType)(typeNode, context);
    }
};
exports.convertTypeToGuard = convertTypeToGuard;
//# sourceMappingURL=convert-type-to-guard.js.map