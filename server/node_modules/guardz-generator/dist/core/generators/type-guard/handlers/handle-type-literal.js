"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleTypeLiteral = void 0;
const ts = __importStar(require("typescript"));
const convert_type_to_guard_1 = require("./convert-type-to-guard");
const handleTypeLiteral = (typeNode, context = {}, wrapInIsType = true) => {
    if (!ts.isTypeLiteralNode(typeNode)) {
        throw new Error('Expected TypeLiteralNode');
    }
    // Check if this type literal contains only call signatures (function overload)
    const hasOnlyCallSignatures = typeNode.members.every(member => ts.isCallSignatureDeclaration(member));
    if (hasOnlyCallSignatures) {
        // This is a function overload type, use isAsserted for the entire type
        const typeText = typeNode.getText();
        return `isAsserted<${typeText}>`;
    }
    const properties = typeNode.members
        .map((member) => {
        // Skip index signatures like [k: string]: unknown
        if (ts.isIndexSignatureDeclaration(member)) {
            return '';
        }
        if (ts.isPropertySignature(member) && member.name && member.type) {
            const name = member.name.getText();
            let typeGuard;
            // If the type is a type literal, recursively call without indentation
            if (ts.isTypeLiteralNode(member.type)) {
                typeGuard = (0, exports.handleTypeLiteral)(member.type, context, true);
            }
            else {
                typeGuard = (0, convert_type_to_guard_1.convertTypeToGuard)(member.type, context);
            }
            const isOptional = member.questionToken !== undefined;
            if (isOptional) {
                return `${name}: isUndefinedOr(${typeGuard})`;
            }
            else {
                return `${name}: ${typeGuard}`;
            }
        }
        if (ts.isMethodSignature(member) && member.name) {
            // Method signatures (function types) are not supported, use isAsserted
            const name = member.name.getText();
            const methodTypeText = member.getText();
            return `${name}: isAsserted<${methodTypeText}>`;
        }
        if (ts.isCallSignatureDeclaration(member)) {
            // Call signature declarations (function overloads) are not supported, use isAsserted
            const callSignatureText = member.getText();
            return `isAsserted<${callSignatureText}>`;
        }
        return '';
    })
        .filter(Boolean);
    const objectLiteral = `{ ${properties.join(', ')} }`;
    const typeText = typeNode.getText();
    // Check if this is an empty object type to avoid no-empty-object-type linting rule
    if (properties.length === 0 && typeText === '{}') {
        return wrapInIsType ? `isType({})` : objectLiteral;
    }
    return wrapInIsType ? `isType<${typeText}>(${objectLiteral})` : objectLiteral;
};
exports.handleTypeLiteral = handleTypeLiteral;
//# sourceMappingURL=handle-type-literal.js.map