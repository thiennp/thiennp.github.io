"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeGenericInterfaceTypeGuard = exports.writeInterfaceTypeGuard = void 0;
const builders_1 = require("../builders");
const generate_property_guard_for_generic_1 = require("../generate-property-guard-for-generic");
const writeInterfaceTypeGuard = (interfaceDecl, guardName, collectionResult, allInterfaces, sourceFiles, importMap) => {
    return (0, builders_1.buildInterfaceTypeGuard)(interfaceDecl, guardName, collectionResult, allInterfaces, sourceFiles, importMap);
};
exports.writeInterfaceTypeGuard = writeInterfaceTypeGuard;
const writeGenericInterfaceTypeGuard = (interfaceDecl, guardName, collectionResult, allInterfaces, sourceFiles, importMap) => {
    // For generic interfaces, we need to handle type parameters
    const typeParameters = interfaceDecl.typeParameters;
    if (!typeParameters || typeParameters.length === 0) {
        return (0, exports.writeInterfaceTypeGuard)(interfaceDecl, guardName, collectionResult, allInterfaces, sourceFiles, importMap);
    }
    // Handle generic interface with type parameters
    const typeParamNames = typeParameters.map(param => {
        const name = param.name.text;
        const constraint = param.constraint
            ? ` extends ${param.constraint.getText()}`
            : '';
        const defaultType = param.default ? ` = ${param.default.getText()}` : '';
        return `${name}${constraint}${defaultType}`;
    });
    const typeParamString = typeParamNames.join(', ');
    // Generate property guards for generic interface
    const propertyGuards = collectionResult.properties
        .map(prop => (0, generate_property_guard_for_generic_1.generatePropertyGuardForGeneric)(prop, typeParameters.map(p => p.name.text), sourceFiles, importMap))
        .join(', ');
    // Create the generic function signature with proper parameter names
    const genericParams = typeParameters
        .map(param => `typeGuard${param.name.text}: TypeGuardFn<${param.name.text}>`)
        .join(', ');
    const typeParamNamesOnly = typeParameters.map(p => p.name.text);
    return `export const ${guardName} = <${typeParamString}>(${genericParams}): TypeGuardFn<${interfaceDecl.name.text}<${typeParamNamesOnly.join(', ')}>> => isType<${interfaceDecl.name.text}<${typeParamNamesOnly.join(', ')}>>({ ${propertyGuards} });`;
};
exports.writeGenericInterfaceTypeGuard = writeGenericInterfaceTypeGuard;
//# sourceMappingURL=interface-writers.js.map