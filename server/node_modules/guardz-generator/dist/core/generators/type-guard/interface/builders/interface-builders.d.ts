import type { ImportInfo } from '../../../../../domain/types';
import type { PropertyCollectionResult } from '../collectors';
import type * as ts from 'typescript';
export declare const buildIndexSignatureGuard: (guardName: string, indexSignatureType: ts.TypeNode, keyType: ts.TypeNode | undefined, context: {
    sourceFiles?: ts.SourceFile[];
    importMap?: Map<string, ImportInfo>;
}) => string;
export declare const buildInheritanceGuard: (guardName: string, interfaceDecl: ts.InterfaceDeclaration, heritageTypes: string[], currentPropertyGuards: string) => string;
export declare const buildRecursiveGuard: (guardName: string, interfaceDecl: ts.InterfaceDeclaration, propertyGuards: string) => string;
export declare const buildStandardGuard: (guardName: string, interfaceDecl: ts.InterfaceDeclaration, propertyGuards: string) => string;
export declare const buildInterfaceTypeGuard: (interfaceDecl: ts.InterfaceDeclaration, guardName: string, collectionResult: PropertyCollectionResult, allInterfaces?: ts.InterfaceDeclaration[], sourceFiles?: ts.SourceFile[], importMap?: Map<string, ImportInfo>, currentSourceFile?: ts.SourceFile) => string;
//# sourceMappingURL=interface-builders.d.ts.map