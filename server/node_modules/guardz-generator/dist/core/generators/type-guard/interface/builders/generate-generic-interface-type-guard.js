"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateGenericInterfaceTypeGuard = void 0;
const ast_1 = require("../../../../../shared/utils/ast");
const generate_property_guard_for_generic_1 = require("./generate-property-guard-for-generic");
const generateGenericInterfaceTypeGuard = (interfaceDecl, guardName, allInterfaces, sourceFiles, importMap) => {
    const properties = (0, ast_1.extractProperties)(interfaceDecl);
    const typeParameters = (0, ast_1.extractTypeParametersFromInterface)(interfaceDecl);
    // Use the new recursion detection if we have all interfaces, otherwise fall back to the old method
    const isRecursive = allInterfaces
        ? (0, ast_1.isRecursiveOrCyclic)(interfaceDecl)
        : (0, ast_1.isRecursiveType)(interfaceDecl);
    const typeParameterNames = typeParameters.map(tp => tp.name);
    const typeParameterString = typeParameters
        .map(tp => (0, ast_1.formatTypeParameter)(tp))
        .join(', ');
    const propertyGuards = properties
        .map(prop => (0, generate_property_guard_for_generic_1.generatePropertyGuardForGeneric)(prop, typeParameterNames, sourceFiles, importMap))
        .join(', ');
    if (isRecursive) {
        const guardParameters = typeParameters
            .map(tp => `typeGuard${tp.name}: TypeGuardFn<${tp.name}>`)
            .join(', ');
        return `export function ${guardName}<${typeParameterString}>(${guardParameters}): (value: unknown, config?: TypeGuardFnConfig | null) => value is ${interfaceDecl.name.text}<${typeParameterNames.join(', ')}> {\n  return (value: unknown, config?: TypeGuardFnConfig | null): value is ${interfaceDecl.name.text}<${typeParameterNames.join(', ')}> => {\n    return isType<${interfaceDecl.name.text}<${typeParameterNames.join(', ')}>>({ ${propertyGuards} })(value, config);\n  };\n}`;
    }
    else {
        return `export const ${guardName} = <${typeParameterString}>(${typeParameters
            .map(tp => `typeGuard${tp.name}: TypeGuardFn<${tp.name}>`)
            .join(', ')}): TypeGuardFn<${interfaceDecl.name.text}<${typeParameterNames.join(', ')}>> => isType<${interfaceDecl.name.text}<${typeParameterNames.join(', ')}>>({ ${propertyGuards} });`;
    }
};
exports.generateGenericInterfaceTypeGuard = generateGenericInterfaceTypeGuard;
//# sourceMappingURL=generate-generic-interface-type-guard.js.map